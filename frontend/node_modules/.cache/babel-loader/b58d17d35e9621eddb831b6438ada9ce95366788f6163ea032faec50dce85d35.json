{"ast":null,"code":"var _jsxFileName = \"/Users/abr/DAMN/inventory-system/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport api from '../services/api'; // Import the api instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [tokens, setTokens] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n  const [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwtDecode(localStorage.getItem('authTokens')) : null);\n  useEffect(() => {\n    // This effect runs whenever the tokens change, and on initial load\n    if (tokens) {\n      // Set the auth token for all future axios requests\n      api.defaults.headers.common['Authorization'] = 'Bearer ' + tokens.access;\n      localStorage.setItem('authTokens', JSON.stringify(tokens));\n    } else {\n      // Remove the auth token if the user logs out\n      delete api.defaults.headers.common['Authorization'];\n      localStorage.removeItem('authTokens');\n    }\n  }, [tokens]);\n  const loginUser = newTokens => {\n    setTokens(newTokens);\n    setUser(jwtDecode(newTokens.access));\n  };\n  const logoutUser = () => {\n    setTokens(null);\n    setUser(null);\n  };\n  const contextData = {\n    user,\n    tokens,\n    loginUser,\n    logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ZwI63djZc01Z5NkcMRXmItTpsCA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","tokens","setTokens","localStorage","getItem","JSON","parse","user","setUser","defaults","headers","common","access","setItem","stringify","removeItem","loginUser","newTokens","logoutUser","contextData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/abr/DAMN/inventory-system/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport api from '../services/api'; // Import the api instance\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [tokens, setTokens] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n  const [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwtDecode(localStorage.getItem('authTokens')) : null);\n\n  useEffect(() => {\n    // This effect runs whenever the tokens change, and on initial load\n    if (tokens) {\n      // Set the auth token for all future axios requests\n      api.defaults.headers.common['Authorization'] = 'Bearer ' + tokens.access;\n      localStorage.setItem('authTokens', JSON.stringify(tokens));\n    } else {\n      // Remove the auth token if the user logs out\n      delete api.defaults.headers.common['Authorization'];\n      localStorage.removeItem('authTokens');\n    }\n  }, [tokens]);\n\n  const loginUser = (newTokens) => {\n    setTokens(newTokens);\n    setUser(jwtDecode(newTokens.access));\n  };\n\n  const logoutUser = () => {\n    setTokens(null);\n    setUser(null);\n  };\n\n  const contextData = {\n    user,\n    tokens,\n    loginUser,\n    logoutUser,\n  };\n  \n  return (\n    <AuthContext.Provider value={contextData}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,GAAG,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,gBAAGR,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,MAAMa,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC;EACtI,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,MAAMa,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAAGX,SAAS,CAACU,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC;EAEjIZ,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,MAAM,EAAE;MACV;MACAP,GAAG,CAACe,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGV,MAAM,CAACW,MAAM;MACxET,YAAY,CAACU,OAAO,CAAC,YAAY,EAAER,IAAI,CAACS,SAAS,CAACb,MAAM,CAAC,CAAC;IAC5D,CAAC,MAAM;MACL;MACA,OAAOP,GAAG,CAACe,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;MACnDR,YAAY,CAACY,UAAU,CAAC,YAAY,CAAC;IACvC;EACF,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;EAEZ,MAAMe,SAAS,GAAIC,SAAS,IAAK;IAC/Bf,SAAS,CAACe,SAAS,CAAC;IACpBT,OAAO,CAACf,SAAS,CAACwB,SAAS,CAACL,MAAM,CAAC,CAAC;EACtC,CAAC;EAED,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACvBhB,SAAS,CAAC,IAAI,CAAC;IACfM,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMW,WAAW,GAAG;IAClBZ,IAAI;IACJN,MAAM;IACNe,SAAS;IACTE;EACF,CAAC;EAED,oBACEtB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAEF,WAAY;IAAApB,QAAA,EACtCA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,EAAA,CAvCWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAyCzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOrC,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAAC+B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}