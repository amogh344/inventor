{"ast":null,"code":"import React,{useState,useEffect}from'react';/**\n * A component to display an image from a protected API endpoint.\n * It fetches the image data as a blob using an authenticated API call\n * and then renders it, handling loading, error, and memory cleanup.\n * @param {object} props\n * @param {() => Promise<any>} props.fetchImage - The async function that fetches the image.\n * @param {string} props.alt - The alt text for the image.\n * @param {object} props.style - The style object for the image tag.\n */import{jsx as _jsx}from\"react/jsx-runtime\";function AuthenticatedImage(_ref){let{fetchImage,alt,style}=_ref;const[imageSrc,setImageSrc]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(false);useEffect(()=>{// A flag to prevent state updates if the component unmounts during the fetch\nlet isMounted=true;// We store the object URL here so the cleanup function can access it\nlet objectUrl=null;const loadImage=async()=>{try{const response=await fetchImage();objectUrl=URL.createObjectURL(response.data);if(isMounted){setImageSrc(objectUrl);}}catch(err){console.error(\"Failed to load authenticated image:\",err);if(isMounted){setError(true);}}finally{if(isMounted){setLoading(false);}}};loadImage();// This is the cleanup function that runs when the component is removed\nreturn()=>{isMounted=false;// If the object URL was created, we revoke it to free up browser memory\nif(objectUrl){URL.revokeObjectURL(objectUrl);}};},[fetchImage]);// The effect re-runs if the fetchImage function changes\nif(loading){return/*#__PURE__*/_jsx(\"span\",{children:\"Loading...\"});}if(error||!imageSrc){return/*#__PURE__*/_jsx(\"span\",{children:\"Error\"});}return/*#__PURE__*/_jsx(\"img\",{src:imageSrc,alt:alt,style:style});}export default AuthenticatedImage;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","AuthenticatedImage","_ref","fetchImage","alt","style","imageSrc","setImageSrc","loading","setLoading","error","setError","isMounted","objectUrl","loadImage","response","URL","createObjectURL","data","err","console","revokeObjectURL","children","src"],"sources":["/Users/abr/DAMN/inventory-system/frontend/src/components/AuthenticatedImage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n/**\n * A component to display an image from a protected API endpoint.\n * It fetches the image data as a blob using an authenticated API call\n * and then renders it, handling loading, error, and memory cleanup.\n * @param {object} props\n * @param {() => Promise<any>} props.fetchImage - The async function that fetches the image.\n * @param {string} props.alt - The alt text for the image.\n * @param {object} props.style - The style object for the image tag.\n */\nfunction AuthenticatedImage({ fetchImage, alt, style }) {\n  const [imageSrc, setImageSrc] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // A flag to prevent state updates if the component unmounts during the fetch\n    let isMounted = true;\n    // We store the object URL here so the cleanup function can access it\n    let objectUrl = null;\n\n    const loadImage = async () => {\n      try {\n        const response = await fetchImage();\n        objectUrl = URL.createObjectURL(response.data);\n        if (isMounted) {\n          setImageSrc(objectUrl);\n        }\n      } catch (err) {\n        console.error(\"Failed to load authenticated image:\", err);\n        if (isMounted) {\n          setError(true);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    loadImage();\n\n    // This is the cleanup function that runs when the component is removed\n    return () => {\n      isMounted = false;\n      // If the object URL was created, we revoke it to free up browser memory\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [fetchImage]); // The effect re-runs if the fetchImage function changes\n\n  if (loading) {\n    return <span>Loading...</span>;\n  }\n\n  if (error || !imageSrc) {\n    return <span>Error</span>;\n  }\n  \n  return <img src={imageSrc} alt={alt} style={style} />;\n}\n\nexport default AuthenticatedImage;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARA,OAAAC,GAAA,IAAAC,IAAA,yBASA,QAAS,CAAAC,kBAAkBA,CAAAC,IAAA,CAA6B,IAA5B,CAAEC,UAAU,CAAEC,GAAG,CAAEC,KAAM,CAAC,CAAAH,IAAA,CACpD,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACa,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAEzCC,SAAS,CAAC,IAAM,CACd;AACA,GAAI,CAAAc,SAAS,CAAG,IAAI,CACpB;AACA,GAAI,CAAAC,SAAS,CAAG,IAAI,CAEpB,KAAM,CAAAC,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAZ,UAAU,CAAC,CAAC,CACnCU,SAAS,CAAGG,GAAG,CAACC,eAAe,CAACF,QAAQ,CAACG,IAAI,CAAC,CAC9C,GAAIN,SAAS,CAAE,CACbL,WAAW,CAACM,SAAS,CAAC,CACxB,CACF,CAAE,MAAOM,GAAG,CAAE,CACZC,OAAO,CAACV,KAAK,CAAC,qCAAqC,CAAES,GAAG,CAAC,CACzD,GAAIP,SAAS,CAAE,CACbD,QAAQ,CAAC,IAAI,CAAC,CAChB,CACF,CAAC,OAAS,CACR,GAAIC,SAAS,CAAE,CACbH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CACF,CAAC,CAEDK,SAAS,CAAC,CAAC,CAEX;AACA,MAAO,IAAM,CACXF,SAAS,CAAG,KAAK,CACjB;AACA,GAAIC,SAAS,CAAE,CACbG,GAAG,CAACK,eAAe,CAACR,SAAS,CAAC,CAChC,CACF,CAAC,CACH,CAAC,CAAE,CAACV,UAAU,CAAC,CAAC,CAAE;AAElB,GAAIK,OAAO,CAAE,CACX,mBAAOR,IAAA,SAAAsB,QAAA,CAAM,YAAU,CAAM,CAAC,CAChC,CAEA,GAAIZ,KAAK,EAAI,CAACJ,QAAQ,CAAE,CACtB,mBAAON,IAAA,SAAAsB,QAAA,CAAM,OAAK,CAAM,CAAC,CAC3B,CAEA,mBAAOtB,IAAA,QAAKuB,GAAG,CAAEjB,QAAS,CAACF,GAAG,CAAEA,GAAI,CAACC,KAAK,CAAEA,KAAM,CAAE,CAAC,CACvD,CAEA,cAAe,CAAAJ,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}