{"ast":null,"code":"// // src/pages/ProductsPage.js\n// import React, { useState, useEffect } from 'react';\n// import { Container, Table, Spinner, Alert, Button, Card } from 'react-bootstrap';\n// import TableToolbar from '../components/ui/TableToolbar';\n// import { useToast } from '../components/ui/ToastProvider';\n// import { getProducts, createProduct, updateProduct, deleteProduct } from '../services/api';\n// import ProductFormModal from '../components/ProductFormModal';\n// import RoleRequired from '../components/RoleRequired';\n\n// function ProductsPage() {\n//   const [products, setProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState('');\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedProduct, setSelectedProduct] = useState(null);\n//   const [search, setSearch] = useState('');\n//   const { showToast } = useToast();\n\n//   const fetchProducts = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await getProducts();\n\n//       // Ensure newest products appear at the top (by id descending)\n//       const sortedProducts = response.data.sort((a, b) => b.id - a.id);\n\n//       setProducts(sortedProducts);\n//       setError('');\n//     } catch (err) {\n//       setError('Failed to fetch products.');\n//       console.error(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchProducts();\n//   }, []);\n\n//   const handleShowCreateModal = () => {\n//     setSelectedProduct(null);\n//     setShowModal(true);\n//   };\n\n//   const handleShowEditModal = (product) => {\n//     setSelectedProduct(product);\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//     setSelectedProduct(null);\n//   };\n\n//   const handleSave = async (formData) => {\n//     try {\n//       if (selectedProduct) {\n//         await updateProduct(selectedProduct.id, formData);\n//         showToast({ variant: 'success', message: 'Product updated' });\n//       } else {\n//         await createProduct(formData);\n//         showToast({ variant: 'success', message: 'Product created' });\n//       }\n//       fetchProducts();\n//       handleCloseModal();\n//     } catch (err) {\n//       setError(selectedProduct ? 'Failed to update product.' : 'Failed to create product.');\n//       showToast({ variant: 'danger', message: 'Action failed' });\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (window.confirm('Are you sure?')) {\n//       try {\n//         await deleteProduct(id);\n//         fetchProducts();\n//       } catch (err) {\n//         setError('Failed to delete product.');\n//       }\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Container className=\"text-center mt-5\">\n//         <Spinner animation=\"border\" />\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container className=\"my-4\">\n//       <Card className=\"shadow-sm border-0\">\n//         <Card.Header className=\"d-flex justify-content-between align-items-center bg-light\">\n//           <h3 className=\"mb-0\">\n//             <i className=\"bi bi-box-seam me-2\" /> Products\n//           </h3>\n//           <div className=\"d-flex gap-2\">\n//             <TableToolbar search={search} onSearchChange={setSearch} actions={null} />\n//             <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//               <Button variant=\"primary\" onClick={handleShowCreateModal}>\n//                 <i className=\"bi bi-plus-lg me-1\" /> Create\n//               </Button>\n//             </RoleRequired>\n//           </div>\n//         </Card.Header>\n\n//         <Card.Body>\n//           {error && <Alert variant=\"danger\" className=\"mb-3\">{error}</Alert>}\n\n//           <Table hover responsive borderless className=\"align-middle\">\n//             <thead className=\"table-light\">\n//               <tr>\n//                 <th>SKU</th>\n//                 <th>Name</th>\n//                 <th>Stock</th>\n//                 <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                   <th className=\"text-center\">Actions</th>\n//                 </RoleRequired>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {products\n//                 .filter((p) =>\n//                   [p.sku, p.name].join(' ').toLowerCase().includes(search.toLowerCase())\n//                 )\n//                 .map((product) => (\n//                   <tr key={product.id}>\n//                     <td>{product.sku}</td>\n//                     <td>{product.name}</td>\n//                     <td>{product.stock_quantity}</td>\n//                     <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                       <td className=\"text-center\">\n//                         <div className=\"d-flex justify-content-center gap-2\">\n//                           <Button\n//                             variant=\"outline-secondary\"\n//                             size=\"sm\"\n//                             onClick={() => handleShowEditModal(product)}\n//                           >\n//                             <i className=\"bi bi-pencil\" /> Edit\n//                           </Button>\n//                           <Button\n//                             variant=\"outline-danger\"\n//                             size=\"sm\"\n//                             onClick={() => handleDelete(product.id)}\n//                           >\n//                             <i className=\"bi bi-trash\" /> Delete\n//                           </Button>\n//                         </div>\n//                       </td>\n//                     </RoleRequired>\n//                   </tr>\n//                 ))}\n//             </tbody>\n//           </Table>\n//         </Card.Body>\n//       </Card>\n\n//       <ProductFormModal\n//         show={showModal}\n//         handleClose={handleCloseModal}\n//         product={selectedProduct}\n//         onSave={handleSave}\n//       />\n//     </Container>\n//   );\n// }\n\n// export default ProductsPage;","map":{"version":3,"names":[],"sources":["/Users/abr/inventor/frontend_v2/src/pages/ProductsPage.js"],"sourcesContent":["// // src/pages/ProductsPage.js\n// import React, { useState, useEffect } from 'react';\n// import { Container, Table, Spinner, Alert, Button, Card } from 'react-bootstrap';\n// import TableToolbar from '../components/ui/TableToolbar';\n// import { useToast } from '../components/ui/ToastProvider';\n// import { getProducts, createProduct, updateProduct, deleteProduct } from '../services/api';\n// import ProductFormModal from '../components/ProductFormModal';\n// import RoleRequired from '../components/RoleRequired';\n\n// function ProductsPage() {\n//   const [products, setProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState('');\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedProduct, setSelectedProduct] = useState(null);\n//   const [search, setSearch] = useState('');\n//   const { showToast } = useToast();\n\n//   const fetchProducts = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await getProducts();\n\n//       // Ensure newest products appear at the top (by id descending)\n//       const sortedProducts = response.data.sort((a, b) => b.id - a.id);\n\n//       setProducts(sortedProducts);\n//       setError('');\n//     } catch (err) {\n//       setError('Failed to fetch products.');\n//       console.error(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchProducts();\n//   }, []);\n\n//   const handleShowCreateModal = () => {\n//     setSelectedProduct(null);\n//     setShowModal(true);\n//   };\n\n//   const handleShowEditModal = (product) => {\n//     setSelectedProduct(product);\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//     setSelectedProduct(null);\n//   };\n\n//   const handleSave = async (formData) => {\n//     try {\n//       if (selectedProduct) {\n//         await updateProduct(selectedProduct.id, formData);\n//         showToast({ variant: 'success', message: 'Product updated' });\n//       } else {\n//         await createProduct(formData);\n//         showToast({ variant: 'success', message: 'Product created' });\n//       }\n//       fetchProducts();\n//       handleCloseModal();\n//     } catch (err) {\n//       setError(selectedProduct ? 'Failed to update product.' : 'Failed to create product.');\n//       showToast({ variant: 'danger', message: 'Action failed' });\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (window.confirm('Are you sure?')) {\n//       try {\n//         await deleteProduct(id);\n//         fetchProducts();\n//       } catch (err) {\n//         setError('Failed to delete product.');\n//       }\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Container className=\"text-center mt-5\">\n//         <Spinner animation=\"border\" />\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container className=\"my-4\">\n//       <Card className=\"shadow-sm border-0\">\n//         <Card.Header className=\"d-flex justify-content-between align-items-center bg-light\">\n//           <h3 className=\"mb-0\">\n//             <i className=\"bi bi-box-seam me-2\" /> Products\n//           </h3>\n//           <div className=\"d-flex gap-2\">\n//             <TableToolbar search={search} onSearchChange={setSearch} actions={null} />\n//             <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//               <Button variant=\"primary\" onClick={handleShowCreateModal}>\n//                 <i className=\"bi bi-plus-lg me-1\" /> Create\n//               </Button>\n//             </RoleRequired>\n//           </div>\n//         </Card.Header>\n\n//         <Card.Body>\n//           {error && <Alert variant=\"danger\" className=\"mb-3\">{error}</Alert>}\n\n//           <Table hover responsive borderless className=\"align-middle\">\n//             <thead className=\"table-light\">\n//               <tr>\n//                 <th>SKU</th>\n//                 <th>Name</th>\n//                 <th>Stock</th>\n//                 <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                   <th className=\"text-center\">Actions</th>\n//                 </RoleRequired>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {products\n//                 .filter((p) =>\n//                   [p.sku, p.name].join(' ').toLowerCase().includes(search.toLowerCase())\n//                 )\n//                 .map((product) => (\n//                   <tr key={product.id}>\n//                     <td>{product.sku}</td>\n//                     <td>{product.name}</td>\n//                     <td>{product.stock_quantity}</td>\n//                     <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                       <td className=\"text-center\">\n//                         <div className=\"d-flex justify-content-center gap-2\">\n//                           <Button\n//                             variant=\"outline-secondary\"\n//                             size=\"sm\"\n//                             onClick={() => handleShowEditModal(product)}\n//                           >\n//                             <i className=\"bi bi-pencil\" /> Edit\n//                           </Button>\n//                           <Button\n//                             variant=\"outline-danger\"\n//                             size=\"sm\"\n//                             onClick={() => handleDelete(product.id)}\n//                           >\n//                             <i className=\"bi bi-trash\" /> Delete\n//                           </Button>\n//                         </div>\n//                       </td>\n//                     </RoleRequired>\n//                   </tr>\n//                 ))}\n//             </tbody>\n//           </Table>\n//         </Card.Body>\n//       </Card>\n\n//       <ProductFormModal\n//         show={showModal}\n//         handleClose={handleCloseModal}\n//         product={selectedProduct}\n//         onSave={handleSave}\n//       />\n//     </Container>\n//   );\n// }\n\n// export default ProductsPage;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}