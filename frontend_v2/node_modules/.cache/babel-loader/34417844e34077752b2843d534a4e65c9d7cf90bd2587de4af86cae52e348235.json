{"ast":null,"code":"var _jsxFileName = \"/Users/abr/inventor/frontend/src/components/AuthenticatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n/**\n * A component to display an image from a protected API endpoint.\n * It fetches the image data as a blob using an authenticated API call\n * and then renders it, handling loading, error, and memory cleanup.\n * @param {object} props\n * @param {() => Promise<any>} props.fetchImage - The async function that fetches the image.\n * @param {string} props.alt - The alt text for the image.\n * @param {object} props.style - The style object for the image tag.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticatedImage({\n  fetchImage,\n  alt,\n  style\n}) {\n  _s();\n  const [imageSrc, setImageSrc] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    // A flag to prevent state updates if the component unmounts during the fetch\n    let isMounted = true;\n    // We store the object URL here so the cleanup function can access it\n    let objectUrl = null;\n    const loadImage = async () => {\n      try {\n        const response = await fetchImage();\n        objectUrl = URL.createObjectURL(response.data);\n        if (isMounted) {\n          setImageSrc(objectUrl);\n        }\n      } catch (err) {\n        console.error(\"Failed to load authenticated image:\", err);\n        if (isMounted) {\n          setError(true);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n    loadImage();\n\n    // This is the cleanup function that runs when the component is removed\n    return () => {\n      isMounted = false;\n      // If the object URL was created, we revoke it to free up browser memory\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [fetchImage]); // The effect re-runs if the fetchImage function changes\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n  if (error || !imageSrc) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: imageSrc,\n    alt: alt,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthenticatedImage, \"pHWnZELiEdhfCGNYSn6NCRYARH4=\");\n_c = AuthenticatedImage;\nexport default AuthenticatedImage;\nvar _c;\n$RefreshReg$(_c, \"AuthenticatedImage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AuthenticatedImage","fetchImage","alt","style","_s","imageSrc","setImageSrc","loading","setLoading","error","setError","isMounted","objectUrl","loadImage","response","URL","createObjectURL","data","err","console","revokeObjectURL","children","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","$RefreshReg$"],"sources":["/Users/abr/inventor/frontend/src/components/AuthenticatedImage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n/**\n * A component to display an image from a protected API endpoint.\n * It fetches the image data as a blob using an authenticated API call\n * and then renders it, handling loading, error, and memory cleanup.\n * @param {object} props\n * @param {() => Promise<any>} props.fetchImage - The async function that fetches the image.\n * @param {string} props.alt - The alt text for the image.\n * @param {object} props.style - The style object for the image tag.\n */\nfunction AuthenticatedImage({ fetchImage, alt, style }) {\n  const [imageSrc, setImageSrc] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // A flag to prevent state updates if the component unmounts during the fetch\n    let isMounted = true;\n    // We store the object URL here so the cleanup function can access it\n    let objectUrl = null;\n\n    const loadImage = async () => {\n      try {\n        const response = await fetchImage();\n        objectUrl = URL.createObjectURL(response.data);\n        if (isMounted) {\n          setImageSrc(objectUrl);\n        }\n      } catch (err) {\n        console.error(\"Failed to load authenticated image:\", err);\n        if (isMounted) {\n          setError(true);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    loadImage();\n\n    // This is the cleanup function that runs when the component is removed\n    return () => {\n      isMounted = false;\n      // If the object URL was created, we revoke it to free up browser memory\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [fetchImage]); // The effect re-runs if the fetchImage function changes\n\n  if (loading) {\n    return <span>Loading...</span>;\n  }\n\n  if (error || !imageSrc) {\n    return <span>Error</span>;\n  }\n  \n  return <img src={imageSrc} alt={alt} style={style} />;\n}\n\nexport default AuthenticatedImage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,SAASC,kBAAkBA,CAAC;EAAEC,UAAU;EAAEC,GAAG;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEzCC,SAAS,CAAC,MAAM;IACd;IACA,IAAIc,SAAS,GAAG,IAAI;IACpB;IACA,IAAIC,SAAS,GAAG,IAAI;IAEpB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,UAAU,CAAC,CAAC;QACnCW,SAAS,GAAGG,GAAG,CAACC,eAAe,CAACF,QAAQ,CAACG,IAAI,CAAC;QAC9C,IAAIN,SAAS,EAAE;UACbL,WAAW,CAACM,SAAS,CAAC;QACxB;MACF,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZC,OAAO,CAACV,KAAK,CAAC,qCAAqC,EAAES,GAAG,CAAC;QACzD,IAAIP,SAAS,EAAE;UACbD,QAAQ,CAAC,IAAI,CAAC;QAChB;MACF,CAAC,SAAS;QACR,IAAIC,SAAS,EAAE;UACbH,UAAU,CAAC,KAAK,CAAC;QACnB;MACF;IACF,CAAC;IAEDK,SAAS,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACXF,SAAS,GAAG,KAAK;MACjB;MACA,IAAIC,SAAS,EAAE;QACbG,GAAG,CAACK,eAAe,CAACR,SAAS,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,CAACX,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElB,IAAIM,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAAsB,QAAA,EAAM;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAChC;EAEA,IAAIhB,KAAK,IAAI,CAACJ,QAAQ,EAAE;IACtB,oBAAON,OAAA;MAAAsB,QAAA,EAAM;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC3B;EAEA,oBAAO1B,OAAA;IAAK2B,GAAG,EAAErB,QAAS;IAACH,GAAG,EAAEA,GAAI;IAACC,KAAK,EAAEA;EAAM;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvD;AAACrB,EAAA,CAnDQJ,kBAAkB;AAAA2B,EAAA,GAAlB3B,kBAAkB;AAqD3B,eAAeA,kBAAkB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}