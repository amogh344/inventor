{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useLayoutEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { useStore, createSelectorMemoized } from '@mui/x-internals/store';\nimport { Size } from \"../models/index.js\";\n\n/* eslint-disable import/export, @typescript-eslint/no-redeclare */\n/* eslint-disable no-underscore-dangle */\n\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: Size.EMPTY,\n  viewportOuterSize: Size.EMPTY,\n  viewportInnerSize: Size.EMPTY,\n  contentSize: Size.EMPTY,\n  minimumSize: Size.EMPTY,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nconst selectors = {\n  rootSize: state => state.rootSize,\n  dimensions: state => state.dimensions,\n  rowHeight: state => state.dimensions.rowHeight,\n  contentHeight: state => state.dimensions.contentSize.height,\n  rowsMeta: state => state.rowsMeta,\n  columnPositions: createSelectorMemoized((_, columns) => {\n    const positions = [];\n    let currentPosition = 0;\n    for (let i = 0; i < columns.length; i += 1) {\n      positions.push(currentPosition);\n      currentPosition += columns[i].computedWidth;\n    }\n    return positions;\n  }),\n  needsHorizontalScrollbar: state => state.dimensions.viewportOuterSize.width > 0 && state.dimensions.columnsTotalWidth > state.dimensions.viewportOuterSize.width\n};\nexport const Dimensions = {\n  initialize: initializeState,\n  use: useDimensions,\n  selectors\n};\nfunction initializeState(params) {\n  const dimensions = _extends({}, EMPTY_DIMENSIONS, params.dimensions);\n  const {\n    rowCount\n  } = params;\n  const {\n    rowHeight\n  } = dimensions;\n  const rowsMeta = {\n    currentPageTotalHeight: rowCount * rowHeight,\n    positions: Array.from({\n      length: rowCount\n    }, (_, i) => i * rowHeight),\n    pinnedTopRowsTotalHeight: 0,\n    pinnedBottomRowsTotalHeight: 0\n  };\n  const rowHeights = new Map();\n  return {\n    rootSize: Size.EMPTY,\n    dimensions,\n    rowsMeta,\n    rowHeights\n  };\n}\nfunction useDimensions(store, params, _api) {\n  const isFirstSizing = React.useRef(true);\n  const {\n    refs,\n    dimensions: {\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      topPinnedHeight,\n      bottomPinnedHeight\n    },\n    onResize\n  } = params;\n  const containerNode = refs.container.current;\n  const updateDimensions = React.useCallback(() => {\n    if (isFirstSizing.current) {\n      return;\n    }\n    const rootSize = selectors.rootSize(store.state);\n    const rowsMeta = selectors.rowsMeta(store.state);\n\n    // All the floating point dimensions should be rounded to .1 decimal places to avoid subpixel rendering issues\n    // https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\n    // https://github.com/mui/mui-x/issues/15721\n    const scrollbarSize = measureScrollbarSize(containerNode, params.dimensions.scrollbarSize);\n    const topContainerHeight = topPinnedHeight + rowsMeta.pinnedTopRowsTotalHeight;\n    const bottomContainerHeight = bottomPinnedHeight + rowsMeta.pinnedBottomRowsTotalHeight;\n    const contentSize = {\n      width: columnsTotalWidth,\n      height: roundToDecimalPlaces(rowsMeta.currentPageTotalHeight, 1)\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (params.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootSize.width);\n      viewportOuterSize = {\n        width: rootSize.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootSize.width,\n        height: rootSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootSize,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = store.state.dimensions;\n    if (isDeepEqual(prevDimensions, newDimensions)) {\n      return;\n    }\n    store.update({\n      dimensions: newDimensions\n    });\n    onResize?.(newDimensions.root);\n  }, [store, containerNode, params.dimensions.scrollbarSize, params.autoHeight, onResize, rowHeight, columnsTotalWidth, leftPinnedWidth, rightPinnedWidth, topPinnedHeight, bottomPinnedHeight]);\n  const {\n    resizeThrottleMs\n  } = params;\n  const updateDimensionCallback = useEventCallback(updateDimensions);\n  const debouncedUpdateDimensions = React.useMemo(() => resizeThrottleMs > 0 ? throttle(updateDimensionCallback, resizeThrottleMs) : undefined, [resizeThrottleMs, updateDimensionCallback]);\n  React.useEffect(() => debouncedUpdateDimensions?.clear, [debouncedUpdateDimensions]);\n  const setRootSize = useEventCallback(rootSize => {\n    store.state.rootSize = rootSize;\n    if (isFirstSizing.current || !debouncedUpdateDimensions) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      isFirstSizing.current = false;\n      updateDimensions();\n    } else {\n      debouncedUpdateDimensions();\n    }\n  });\n  useLayoutEffect(() => observeRootNode(containerNode, store, setRootSize), [containerNode, store, setRootSize]);\n  useLayoutEffect(updateDimensions, [updateDimensions]);\n  const rowsMeta = useRowsMeta(store, params, updateDimensions);\n  return {\n    updateDimensions,\n    debouncedUpdateDimensions,\n    rowsMeta\n  };\n}\nfunction useRowsMeta(store, params, updateDimensions) {\n  const heightCache = store.state.rowHeights;\n  const {\n    rows,\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = params;\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const isHeightMetaValid = React.useRef(false);\n  const pinnedRows = params.pinnedRows;\n  const rowHeight = useStore(store, selectors.rowHeight);\n  const getRowHeightEntry = useEventCallback(rowId => {\n    let entry = heightCache.get(rowId);\n    if (entry === undefined) {\n      entry = {\n        content: store.state.dimensions.rowHeight,\n        spacingTop: 0,\n        spacingBottom: 0,\n        detail: 0,\n        autoHeight: false,\n        needsFirstMeasurement: true\n      };\n      heightCache.set(rowId, entry);\n    }\n    return entry;\n  });\n  const {\n    applyRowHeight\n  } = params;\n  const processHeightEntry = React.useCallback(row => {\n    // HACK: rowHeight trails behind the most up-to-date value just enough to\n    // mess the initial rowsMeta hydration :/\n    eslintUseValue(rowHeight);\n    const dimensions = selectors.dimensions(store.state);\n    const baseRowHeight = dimensions.rowHeight;\n    const entry = getRowHeightEntry(row.id);\n    if (!getRowHeightProp) {\n      entry.content = baseRowHeight;\n      entry.needsFirstMeasurement = false;\n    } else {\n      const rowHeightFromUser = getRowHeightProp(row);\n      if (rowHeightFromUser === 'auto') {\n        if (entry.needsFirstMeasurement) {\n          const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(row) : baseRowHeight;\n\n          // If the row was not measured yet use the estimated row height\n          entry.content = estimatedRowHeight ?? baseRowHeight;\n        }\n        hasRowWithAutoHeight.current = true;\n        entry.autoHeight = true;\n      } else {\n        // Default back to base rowHeight if getRowHeight returns null value.\n        entry.content = rowHeightFromUser ?? dimensions.rowHeight;\n        entry.needsFirstMeasurement = false;\n        entry.autoHeight = false;\n      }\n    }\n    if (getRowSpacing) {\n      const spacing = getRowSpacing(row);\n      entry.spacingTop = spacing.top ?? 0;\n      entry.spacingBottom = spacing.bottom ?? 0;\n    } else {\n      entry.spacingTop = 0;\n      entry.spacingBottom = 0;\n    }\n    applyRowHeight?.(entry, row);\n    return entry;\n  }, [store, getRowHeightProp, getRowHeightEntry, getEstimatedRowHeight, rowHeight, getRowSpacing, applyRowHeight]);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const pinnedTopRowsTotalHeight = pinnedRows?.top.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0) ?? 0;\n    const pinnedBottomRowsTotalHeight = pinnedRows?.bottom.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0) ?? 0;\n    const positions = [];\n    const currentPageTotalHeight = rows.reduce((acc, row) => {\n      positions.push(acc);\n      const entry = processHeightEntry(row);\n      const total = entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n      return acc + total;\n    }, 0);\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    const didHeightsChange = pinnedTopRowsTotalHeight !== store.state.rowsMeta.pinnedTopRowsTotalHeight || pinnedBottomRowsTotalHeight !== store.state.rowsMeta.pinnedBottomRowsTotalHeight || currentPageTotalHeight !== store.state.rowsMeta.currentPageTotalHeight;\n    const rowsMeta = {\n      currentPageTotalHeight,\n      positions,\n      pinnedTopRowsTotalHeight,\n      pinnedBottomRowsTotalHeight\n    };\n    store.set('rowsMeta', rowsMeta);\n    if (didHeightsChange) {\n      updateDimensions();\n    }\n    isHeightMetaValid.current = true;\n  }, [store, pinnedRows, rows, processHeightEntry, updateDimensions]);\n  const hydrateRowsMetaLatest = useEventCallback(hydrateRowsMeta);\n  const getRowHeight = rowId => {\n    return heightCache.get(rowId)?.content ?? selectors.rowHeight(store.state);\n  };\n  const storeRowHeightMeasurement = (id, height) => {\n    const entry = getRowHeightEntry(id);\n    const didChange = entry.content !== height;\n    entry.needsFirstMeasurement = false;\n    entry.content = height;\n    isHeightMetaValid.current &&= !didChange;\n  };\n  const rowHasAutoHeight = id => {\n    return heightCache.get(id)?.autoHeight ?? false;\n  };\n  const getLastMeasuredRowIndex = () => {\n    return lastMeasuredRowIndex.current;\n  };\n  const setLastMeasuredRowIndex = index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  };\n  const resetRowHeights = () => {\n    heightCache.clear();\n    hydrateRowsMeta();\n  };\n  const resizeObserver = useLazyRef(() => typeof ResizeObserver === 'undefined' ? undefined : new ResizeObserver(entries => {\n    for (let i = 0; i < entries.length; i += 1) {\n      const entry = entries[i];\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      const rowId = entry.target.__mui_id;\n      const focusedVirtualRowId = params.focusedVirtualCell?.()?.id;\n      if (focusedVirtualRowId === rowId && height === 0) {\n        // Focused virtual row has 0 height.\n        // We don't want to store it to avoid scroll jumping.\n        // https://github.com/mui/mui-x/issues/14726\n        return;\n      }\n      storeRowHeightMeasurement(rowId, height);\n    }\n    if (!isHeightMetaValid.current) {\n      // Avoids \"ResizeObserver loop completed with undelivered notifications\" error\n      requestAnimationFrame(() => {\n        hydrateRowsMetaLatest();\n      });\n    }\n  })).current;\n  const observeRowHeight = (element, rowId) => {\n    element.__mui_id = rowId;\n    resizeObserver?.observe(element);\n    return () => resizeObserver?.unobserve(element);\n  };\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  useLayoutEffect(() => {\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  return {\n    getRowHeight,\n    setLastMeasuredRowIndex,\n    storeRowHeightMeasurement,\n    hydrateRowsMeta,\n    observeRowHeight,\n    rowHasAutoHeight,\n    getRowHeightEntry,\n    getLastMeasuredRowIndex,\n    resetRowHeights\n  };\n}\nfunction observeRootNode(node, store, setRootSize) {\n  if (!node) {\n    return undefined;\n  }\n  const bounds = node.getBoundingClientRect();\n  const initialSize = {\n    width: roundToDecimalPlaces(bounds.width, 1),\n    height: roundToDecimalPlaces(bounds.height, 1)\n  };\n  if (store.state.rootSize === Size.EMPTY || !Size.equals(initialSize, store.state.rootSize)) {\n    setRootSize(initialSize);\n  }\n  if (typeof ResizeObserver === 'undefined') {\n    return undefined;\n  }\n  const observer = new ResizeObserver(([entry]) => {\n    if (!entry) {\n      return;\n    }\n    const rootSize = {\n      width: roundToDecimalPlaces(entry.contentRect.width, 1),\n      height: roundToDecimalPlaces(entry.contentRect.height, 1)\n    };\n    if (!Size.equals(rootSize, store.state.rootSize)) {\n      setRootSize(rootSize);\n    }\n  });\n  observer.observe(node);\n  return () => {\n    observer.disconnect();\n  };\n}\nconst scrollbarSizeCache = new WeakMap();\nfunction measureScrollbarSize(element, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (element === null) {\n    return 0;\n  }\n  const cachedSize = scrollbarSizeCache.get(element);\n  if (cachedSize !== undefined) {\n    return cachedSize;\n  }\n  const doc = ownerDocument(element);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  element.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  element.removeChild(scrollDiv);\n  scrollbarSizeCache.set(element, size);\n  return size;\n}\nfunction eslintUseValue(_) {}","map":{"version":3,"names":["_extends","React","ownerDocument","useLazyRef","useLayoutEffect","useEventCallback","throttle","isDeepEqual","roundToDecimalPlaces","useStore","createSelectorMemoized","Size","EMPTY_DIMENSIONS","isReady","root","EMPTY","viewportOuterSize","viewportInnerSize","contentSize","minimumSize","hasScrollX","hasScrollY","scrollbarSize","rowWidth","rowHeight","columnsTotalWidth","leftPinnedWidth","rightPinnedWidth","topContainerHeight","bottomContainerHeight","selectors","rootSize","state","dimensions","contentHeight","height","rowsMeta","columnPositions","_","columns","positions","currentPosition","i","length","push","computedWidth","needsHorizontalScrollbar","width","Dimensions","initialize","initializeState","use","useDimensions","params","rowCount","currentPageTotalHeight","Array","from","pinnedTopRowsTotalHeight","pinnedBottomRowsTotalHeight","rowHeights","Map","store","_api","isFirstSizing","useRef","refs","topPinnedHeight","bottomPinnedHeight","onResize","containerNode","container","current","updateDimensions","useCallback","measureScrollbarSize","autoHeight","Math","round","max","content","hasScrollXIfNoYScrollBar","hasScrollYIfNoXScrollBar","newDimensions","prevDimensions","update","resizeThrottleMs","updateDimensionCallback","debouncedUpdateDimensions","useMemo","undefined","useEffect","clear","setRootSize","observeRootNode","useRowsMeta","heightCache","rows","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","lastMeasuredRowIndex","hasRowWithAutoHeight","isHeightMetaValid","pinnedRows","getRowHeightEntry","rowId","entry","get","spacingTop","spacingBottom","detail","needsFirstMeasurement","set","applyRowHeight","processHeightEntry","row","eslintUseValue","baseRowHeight","id","rowHeightFromUser","estimatedRowHeight","spacing","top","bottom","hydrateRowsMeta","reduce","acc","total","Infinity","didHeightsChange","hydrateRowsMetaLatest","storeRowHeightMeasurement","didChange","rowHasAutoHeight","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","resizeObserver","ResizeObserver","entries","borderBoxSize","blockSize","contentRect","target","__mui_id","focusedVirtualRowId","focusedVirtualCell","requestAnimationFrame","observeRowHeight","element","observe","unobserve","node","bounds","getBoundingClientRect","initialSize","equals","observer","disconnect","scrollbarSizeCache","WeakMap","cachedSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","size","offsetWidth","clientWidth","removeChild"],"sources":["/Users/abr/inventor/frontend_v2/node_modules/@mui/x-virtualizer/esm/features/dimensions.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useLayoutEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { useStore, createSelectorMemoized } from '@mui/x-internals/store';\nimport { Size } from \"../models/index.js\";\n\n/* eslint-disable import/export, @typescript-eslint/no-redeclare */\n/* eslint-disable no-underscore-dangle */\n\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: Size.EMPTY,\n  viewportOuterSize: Size.EMPTY,\n  viewportInnerSize: Size.EMPTY,\n  contentSize: Size.EMPTY,\n  minimumSize: Size.EMPTY,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nconst selectors = {\n  rootSize: state => state.rootSize,\n  dimensions: state => state.dimensions,\n  rowHeight: state => state.dimensions.rowHeight,\n  contentHeight: state => state.dimensions.contentSize.height,\n  rowsMeta: state => state.rowsMeta,\n  columnPositions: createSelectorMemoized((_, columns) => {\n    const positions = [];\n    let currentPosition = 0;\n    for (let i = 0; i < columns.length; i += 1) {\n      positions.push(currentPosition);\n      currentPosition += columns[i].computedWidth;\n    }\n    return positions;\n  }),\n  needsHorizontalScrollbar: state => state.dimensions.viewportOuterSize.width > 0 && state.dimensions.columnsTotalWidth > state.dimensions.viewportOuterSize.width\n};\nexport const Dimensions = {\n  initialize: initializeState,\n  use: useDimensions,\n  selectors\n};\nfunction initializeState(params) {\n  const dimensions = _extends({}, EMPTY_DIMENSIONS, params.dimensions);\n  const {\n    rowCount\n  } = params;\n  const {\n    rowHeight\n  } = dimensions;\n  const rowsMeta = {\n    currentPageTotalHeight: rowCount * rowHeight,\n    positions: Array.from({\n      length: rowCount\n    }, (_, i) => i * rowHeight),\n    pinnedTopRowsTotalHeight: 0,\n    pinnedBottomRowsTotalHeight: 0\n  };\n  const rowHeights = new Map();\n  return {\n    rootSize: Size.EMPTY,\n    dimensions,\n    rowsMeta,\n    rowHeights\n  };\n}\nfunction useDimensions(store, params, _api) {\n  const isFirstSizing = React.useRef(true);\n  const {\n    refs,\n    dimensions: {\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      topPinnedHeight,\n      bottomPinnedHeight\n    },\n    onResize\n  } = params;\n  const containerNode = refs.container.current;\n  const updateDimensions = React.useCallback(() => {\n    if (isFirstSizing.current) {\n      return;\n    }\n    const rootSize = selectors.rootSize(store.state);\n    const rowsMeta = selectors.rowsMeta(store.state);\n\n    // All the floating point dimensions should be rounded to .1 decimal places to avoid subpixel rendering issues\n    // https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\n    // https://github.com/mui/mui-x/issues/15721\n    const scrollbarSize = measureScrollbarSize(containerNode, params.dimensions.scrollbarSize);\n    const topContainerHeight = topPinnedHeight + rowsMeta.pinnedTopRowsTotalHeight;\n    const bottomContainerHeight = bottomPinnedHeight + rowsMeta.pinnedBottomRowsTotalHeight;\n    const contentSize = {\n      width: columnsTotalWidth,\n      height: roundToDecimalPlaces(rowsMeta.currentPageTotalHeight, 1)\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (params.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootSize.width);\n      viewportOuterSize = {\n        width: rootSize.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootSize.width,\n        height: rootSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootSize,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = store.state.dimensions;\n    if (isDeepEqual(prevDimensions, newDimensions)) {\n      return;\n    }\n    store.update({\n      dimensions: newDimensions\n    });\n    onResize?.(newDimensions.root);\n  }, [store, containerNode, params.dimensions.scrollbarSize, params.autoHeight, onResize, rowHeight, columnsTotalWidth, leftPinnedWidth, rightPinnedWidth, topPinnedHeight, bottomPinnedHeight]);\n  const {\n    resizeThrottleMs\n  } = params;\n  const updateDimensionCallback = useEventCallback(updateDimensions);\n  const debouncedUpdateDimensions = React.useMemo(() => resizeThrottleMs > 0 ? throttle(updateDimensionCallback, resizeThrottleMs) : undefined, [resizeThrottleMs, updateDimensionCallback]);\n  React.useEffect(() => debouncedUpdateDimensions?.clear, [debouncedUpdateDimensions]);\n  const setRootSize = useEventCallback(rootSize => {\n    store.state.rootSize = rootSize;\n    if (isFirstSizing.current || !debouncedUpdateDimensions) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      isFirstSizing.current = false;\n      updateDimensions();\n    } else {\n      debouncedUpdateDimensions();\n    }\n  });\n  useLayoutEffect(() => observeRootNode(containerNode, store, setRootSize), [containerNode, store, setRootSize]);\n  useLayoutEffect(updateDimensions, [updateDimensions]);\n  const rowsMeta = useRowsMeta(store, params, updateDimensions);\n  return {\n    updateDimensions,\n    debouncedUpdateDimensions,\n    rowsMeta\n  };\n}\nfunction useRowsMeta(store, params, updateDimensions) {\n  const heightCache = store.state.rowHeights;\n  const {\n    rows,\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = params;\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const isHeightMetaValid = React.useRef(false);\n  const pinnedRows = params.pinnedRows;\n  const rowHeight = useStore(store, selectors.rowHeight);\n  const getRowHeightEntry = useEventCallback(rowId => {\n    let entry = heightCache.get(rowId);\n    if (entry === undefined) {\n      entry = {\n        content: store.state.dimensions.rowHeight,\n        spacingTop: 0,\n        spacingBottom: 0,\n        detail: 0,\n        autoHeight: false,\n        needsFirstMeasurement: true\n      };\n      heightCache.set(rowId, entry);\n    }\n    return entry;\n  });\n  const {\n    applyRowHeight\n  } = params;\n  const processHeightEntry = React.useCallback(row => {\n    // HACK: rowHeight trails behind the most up-to-date value just enough to\n    // mess the initial rowsMeta hydration :/\n    eslintUseValue(rowHeight);\n    const dimensions = selectors.dimensions(store.state);\n    const baseRowHeight = dimensions.rowHeight;\n    const entry = getRowHeightEntry(row.id);\n    if (!getRowHeightProp) {\n      entry.content = baseRowHeight;\n      entry.needsFirstMeasurement = false;\n    } else {\n      const rowHeightFromUser = getRowHeightProp(row);\n      if (rowHeightFromUser === 'auto') {\n        if (entry.needsFirstMeasurement) {\n          const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(row) : baseRowHeight;\n\n          // If the row was not measured yet use the estimated row height\n          entry.content = estimatedRowHeight ?? baseRowHeight;\n        }\n        hasRowWithAutoHeight.current = true;\n        entry.autoHeight = true;\n      } else {\n        // Default back to base rowHeight if getRowHeight returns null value.\n        entry.content = rowHeightFromUser ?? dimensions.rowHeight;\n        entry.needsFirstMeasurement = false;\n        entry.autoHeight = false;\n      }\n    }\n    if (getRowSpacing) {\n      const spacing = getRowSpacing(row);\n      entry.spacingTop = spacing.top ?? 0;\n      entry.spacingBottom = spacing.bottom ?? 0;\n    } else {\n      entry.spacingTop = 0;\n      entry.spacingBottom = 0;\n    }\n    applyRowHeight?.(entry, row);\n    return entry;\n  }, [store, getRowHeightProp, getRowHeightEntry, getEstimatedRowHeight, rowHeight, getRowSpacing, applyRowHeight]);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const pinnedTopRowsTotalHeight = pinnedRows?.top.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0) ?? 0;\n    const pinnedBottomRowsTotalHeight = pinnedRows?.bottom.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0) ?? 0;\n    const positions = [];\n    const currentPageTotalHeight = rows.reduce((acc, row) => {\n      positions.push(acc);\n      const entry = processHeightEntry(row);\n      const total = entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n      return acc + total;\n    }, 0);\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    const didHeightsChange = pinnedTopRowsTotalHeight !== store.state.rowsMeta.pinnedTopRowsTotalHeight || pinnedBottomRowsTotalHeight !== store.state.rowsMeta.pinnedBottomRowsTotalHeight || currentPageTotalHeight !== store.state.rowsMeta.currentPageTotalHeight;\n    const rowsMeta = {\n      currentPageTotalHeight,\n      positions,\n      pinnedTopRowsTotalHeight,\n      pinnedBottomRowsTotalHeight\n    };\n    store.set('rowsMeta', rowsMeta);\n    if (didHeightsChange) {\n      updateDimensions();\n    }\n    isHeightMetaValid.current = true;\n  }, [store, pinnedRows, rows, processHeightEntry, updateDimensions]);\n  const hydrateRowsMetaLatest = useEventCallback(hydrateRowsMeta);\n  const getRowHeight = rowId => {\n    return heightCache.get(rowId)?.content ?? selectors.rowHeight(store.state);\n  };\n  const storeRowHeightMeasurement = (id, height) => {\n    const entry = getRowHeightEntry(id);\n    const didChange = entry.content !== height;\n    entry.needsFirstMeasurement = false;\n    entry.content = height;\n    isHeightMetaValid.current &&= !didChange;\n  };\n  const rowHasAutoHeight = id => {\n    return heightCache.get(id)?.autoHeight ?? false;\n  };\n  const getLastMeasuredRowIndex = () => {\n    return lastMeasuredRowIndex.current;\n  };\n  const setLastMeasuredRowIndex = index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  };\n  const resetRowHeights = () => {\n    heightCache.clear();\n    hydrateRowsMeta();\n  };\n  const resizeObserver = useLazyRef(() => typeof ResizeObserver === 'undefined' ? undefined : new ResizeObserver(entries => {\n    for (let i = 0; i < entries.length; i += 1) {\n      const entry = entries[i];\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      const rowId = entry.target.__mui_id;\n      const focusedVirtualRowId = params.focusedVirtualCell?.()?.id;\n      if (focusedVirtualRowId === rowId && height === 0) {\n        // Focused virtual row has 0 height.\n        // We don't want to store it to avoid scroll jumping.\n        // https://github.com/mui/mui-x/issues/14726\n        return;\n      }\n      storeRowHeightMeasurement(rowId, height);\n    }\n    if (!isHeightMetaValid.current) {\n      // Avoids \"ResizeObserver loop completed with undelivered notifications\" error\n      requestAnimationFrame(() => {\n        hydrateRowsMetaLatest();\n      });\n    }\n  })).current;\n  const observeRowHeight = (element, rowId) => {\n    element.__mui_id = rowId;\n    resizeObserver?.observe(element);\n    return () => resizeObserver?.unobserve(element);\n  };\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  useLayoutEffect(() => {\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  return {\n    getRowHeight,\n    setLastMeasuredRowIndex,\n    storeRowHeightMeasurement,\n    hydrateRowsMeta,\n    observeRowHeight,\n    rowHasAutoHeight,\n    getRowHeightEntry,\n    getLastMeasuredRowIndex,\n    resetRowHeights\n  };\n}\nfunction observeRootNode(node, store, setRootSize) {\n  if (!node) {\n    return undefined;\n  }\n  const bounds = node.getBoundingClientRect();\n  const initialSize = {\n    width: roundToDecimalPlaces(bounds.width, 1),\n    height: roundToDecimalPlaces(bounds.height, 1)\n  };\n  if (store.state.rootSize === Size.EMPTY || !Size.equals(initialSize, store.state.rootSize)) {\n    setRootSize(initialSize);\n  }\n  if (typeof ResizeObserver === 'undefined') {\n    return undefined;\n  }\n  const observer = new ResizeObserver(([entry]) => {\n    if (!entry) {\n      return;\n    }\n    const rootSize = {\n      width: roundToDecimalPlaces(entry.contentRect.width, 1),\n      height: roundToDecimalPlaces(entry.contentRect.height, 1)\n    };\n    if (!Size.equals(rootSize, store.state.rootSize)) {\n      setRootSize(rootSize);\n    }\n  });\n  observer.observe(node);\n  return () => {\n    observer.disconnect();\n  };\n}\nconst scrollbarSizeCache = new WeakMap();\nfunction measureScrollbarSize(element, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (element === null) {\n    return 0;\n  }\n  const cachedSize = scrollbarSizeCache.get(element);\n  if (cachedSize !== undefined) {\n    return cachedSize;\n  }\n  const doc = ownerDocument(element);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  element.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  element.removeChild(scrollDiv);\n  scrollbarSizeCache.set(element, size);\n  return size;\n}\nfunction eslintUseValue(_) {}"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,QAAQ,EAAEC,sBAAsB,QAAQ,wBAAwB;AACzE,SAASC,IAAI,QAAQ,oBAAoB;;AAEzC;AACA;;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAEH,IAAI,CAACI,KAAK;EAChBC,iBAAiB,EAAEL,IAAI,CAACI,KAAK;EAC7BE,iBAAiB,EAAEN,IAAI,CAACI,KAAK;EAC7BG,WAAW,EAAEP,IAAI,CAACI,KAAK;EACvBI,WAAW,EAAER,IAAI,CAACI,KAAK;EACvBK,UAAU,EAAE,KAAK;EACjBC,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAE,CAAC;EAChBC,QAAQ,EAAE,CAAC;EACXC,SAAS,EAAE,CAAC;EACZC,iBAAiB,EAAE,CAAC;EACpBC,eAAe,EAAE,CAAC;EAClBC,gBAAgB,EAAE,CAAC;EACnBC,kBAAkB,EAAE,CAAC;EACrBC,qBAAqB,EAAE;AACzB,CAAC;AACD,MAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAEC,KAAK,IAAIA,KAAK,CAACD,QAAQ;EACjCE,UAAU,EAAED,KAAK,IAAIA,KAAK,CAACC,UAAU;EACrCT,SAAS,EAAEQ,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACT,SAAS;EAC9CU,aAAa,EAAEF,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACf,WAAW,CAACiB,MAAM;EAC3DC,QAAQ,EAAEJ,KAAK,IAAIA,KAAK,CAACI,QAAQ;EACjCC,eAAe,EAAE3B,sBAAsB,CAAC,CAAC4B,CAAC,EAAEC,OAAO,KAAK;IACtD,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAIC,eAAe,GAAG,CAAC;IACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC1CF,SAAS,CAACI,IAAI,CAACH,eAAe,CAAC;MAC/BA,eAAe,IAAIF,OAAO,CAACG,CAAC,CAAC,CAACG,aAAa;IAC7C;IACA,OAAOL,SAAS;EAClB,CAAC,CAAC;EACFM,wBAAwB,EAAEd,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACjB,iBAAiB,CAAC+B,KAAK,GAAG,CAAC,IAAIf,KAAK,CAACC,UAAU,CAACR,iBAAiB,GAAGO,KAAK,CAACC,UAAU,CAACjB,iBAAiB,CAAC+B;AAC7J,CAAC;AACD,OAAO,MAAMC,UAAU,GAAG;EACxBC,UAAU,EAAEC,eAAe;EAC3BC,GAAG,EAAEC,aAAa;EAClBtB;AACF,CAAC;AACD,SAASoB,eAAeA,CAACG,MAAM,EAAE;EAC/B,MAAMpB,UAAU,GAAGjC,QAAQ,CAAC,CAAC,CAAC,EAAEY,gBAAgB,EAAEyC,MAAM,CAACpB,UAAU,CAAC;EACpE,MAAM;IACJqB;EACF,CAAC,GAAGD,MAAM;EACV,MAAM;IACJ7B;EACF,CAAC,GAAGS,UAAU;EACd,MAAMG,QAAQ,GAAG;IACfmB,sBAAsB,EAAED,QAAQ,GAAG9B,SAAS;IAC5CgB,SAAS,EAAEgB,KAAK,CAACC,IAAI,CAAC;MACpBd,MAAM,EAAEW;IACV,CAAC,EAAE,CAAChB,CAAC,EAAEI,CAAC,KAAKA,CAAC,GAAGlB,SAAS,CAAC;IAC3BkC,wBAAwB,EAAE,CAAC;IAC3BC,2BAA2B,EAAE;EAC/B,CAAC;EACD,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5B,OAAO;IACL9B,QAAQ,EAAEpB,IAAI,CAACI,KAAK;IACpBkB,UAAU;IACVG,QAAQ;IACRwB;EACF,CAAC;AACH;AACA,SAASR,aAAaA,CAACU,KAAK,EAAET,MAAM,EAAEU,IAAI,EAAE;EAC1C,MAAMC,aAAa,GAAG/D,KAAK,CAACgE,MAAM,CAAC,IAAI,CAAC;EACxC,MAAM;IACJC,IAAI;IACJjC,UAAU,EAAE;MACVT,SAAS;MACTC,iBAAiB;MACjBC,eAAe;MACfC,gBAAgB;MAChBwC,eAAe;MACfC;IACF,CAAC;IACDC;EACF,CAAC,GAAGhB,MAAM;EACV,MAAMiB,aAAa,GAAGJ,IAAI,CAACK,SAAS,CAACC,OAAO;EAC5C,MAAMC,gBAAgB,GAAGxE,KAAK,CAACyE,WAAW,CAAC,MAAM;IAC/C,IAAIV,aAAa,CAACQ,OAAO,EAAE;MACzB;IACF;IACA,MAAMzC,QAAQ,GAAGD,SAAS,CAACC,QAAQ,CAAC+B,KAAK,CAAC9B,KAAK,CAAC;IAChD,MAAMI,QAAQ,GAAGN,SAAS,CAACM,QAAQ,CAAC0B,KAAK,CAAC9B,KAAK,CAAC;;IAEhD;IACA;IACA;IACA,MAAMV,aAAa,GAAGqD,oBAAoB,CAACL,aAAa,EAAEjB,MAAM,CAACpB,UAAU,CAACX,aAAa,CAAC;IAC1F,MAAMM,kBAAkB,GAAGuC,eAAe,GAAG/B,QAAQ,CAACsB,wBAAwB;IAC9E,MAAM7B,qBAAqB,GAAGuC,kBAAkB,GAAGhC,QAAQ,CAACuB,2BAA2B;IACvF,MAAMzC,WAAW,GAAG;MAClB6B,KAAK,EAAEtB,iBAAiB;MACxBU,MAAM,EAAE3B,oBAAoB,CAAC4B,QAAQ,CAACmB,sBAAsB,EAAE,CAAC;IACjE,CAAC;IACD,IAAIvC,iBAAiB;IACrB,IAAIC,iBAAiB;IACrB,IAAIG,UAAU,GAAG,KAAK;IACtB,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIgC,MAAM,CAACuB,UAAU,EAAE;MACrBvD,UAAU,GAAG,KAAK;MAClBD,UAAU,GAAGyD,IAAI,CAACC,KAAK,CAACrD,iBAAiB,CAAC,GAAGoD,IAAI,CAACC,KAAK,CAAC/C,QAAQ,CAACgB,KAAK,CAAC;MACvE/B,iBAAiB,GAAG;QAClB+B,KAAK,EAAEhB,QAAQ,CAACgB,KAAK;QACrBZ,MAAM,EAAEP,kBAAkB,GAAGC,qBAAqB,GAAGX,WAAW,CAACiB;MACnE,CAAC;MACDlB,iBAAiB,GAAG;QAClB8B,KAAK,EAAE8B,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE/D,iBAAiB,CAAC+B,KAAK,IAAI1B,UAAU,GAAGC,aAAa,GAAG,CAAC,CAAC,CAAC;QAC9Ea,MAAM,EAAE0C,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE/D,iBAAiB,CAACmB,MAAM,IAAIf,UAAU,GAAGE,aAAa,GAAG,CAAC,CAAC;MACjF,CAAC;IACH,CAAC,MAAM;MACLN,iBAAiB,GAAG;QAClB+B,KAAK,EAAEhB,QAAQ,CAACgB,KAAK;QACrBZ,MAAM,EAAEJ,QAAQ,CAACI;MACnB,CAAC;MACDlB,iBAAiB,GAAG;QAClB8B,KAAK,EAAE8B,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE/D,iBAAiB,CAAC+B,KAAK,CAAC;QAC3CZ,MAAM,EAAE0C,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE/D,iBAAiB,CAACmB,MAAM,GAAGP,kBAAkB,GAAGC,qBAAqB;MAC3F,CAAC;MACD,MAAMmD,OAAO,GAAG9D,WAAW;MAC3B,MAAMqD,SAAS,GAAGtD,iBAAiB;MACnC,MAAMgE,wBAAwB,GAAGD,OAAO,CAACjC,KAAK,GAAGwB,SAAS,CAACxB,KAAK;MAChE,MAAMmC,wBAAwB,GAAGF,OAAO,CAAC7C,MAAM,GAAGoC,SAAS,CAACpC,MAAM;MAClE,IAAI8C,wBAAwB,IAAIC,wBAAwB,EAAE;QACxD7D,UAAU,GAAG6D,wBAAwB;QACrC9D,UAAU,GAAG4D,OAAO,CAACjC,KAAK,IAAI1B,UAAU,GAAGC,aAAa,GAAG,CAAC,CAAC,GAAGiD,SAAS,CAACxB,KAAK;;QAE/E;QACA,IAAI3B,UAAU,EAAE;UACdC,UAAU,GAAG2D,OAAO,CAAC7C,MAAM,GAAGb,aAAa,GAAGiD,SAAS,CAACpC,MAAM;QAChE;MACF;MACA,IAAId,UAAU,EAAE;QACdJ,iBAAiB,CAAC8B,KAAK,IAAIzB,aAAa;MAC1C;MACA,IAAIF,UAAU,EAAE;QACdH,iBAAiB,CAACkB,MAAM,IAAIb,aAAa;MAC3C;IACF;IACA,MAAMC,QAAQ,GAAGsD,IAAI,CAACE,GAAG,CAAC/D,iBAAiB,CAAC+B,KAAK,EAAEtB,iBAAiB,IAAIJ,UAAU,GAAGC,aAAa,GAAG,CAAC,CAAC,CAAC;IACxG,MAAMH,WAAW,GAAG;MAClB4B,KAAK,EAAEtB,iBAAiB;MACxBU,MAAM,EAAEP,kBAAkB,GAAGV,WAAW,CAACiB,MAAM,GAAGN;IACpD,CAAC;IACD,MAAMsD,aAAa,GAAG;MACpBtE,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEiB,QAAQ;MACdf,iBAAiB;MACjBC,iBAAiB;MACjBC,WAAW;MACXC,WAAW;MACXC,UAAU;MACVC,UAAU;MACVC,aAAa;MACbC,QAAQ;MACRC,SAAS;MACTC,iBAAiB;MACjBC,eAAe;MACfC,gBAAgB;MAChBC,kBAAkB;MAClBC;IACF,CAAC;IACD,MAAMuD,cAAc,GAAGtB,KAAK,CAAC9B,KAAK,CAACC,UAAU;IAC7C,IAAI1B,WAAW,CAAC6E,cAAc,EAAED,aAAa,CAAC,EAAE;MAC9C;IACF;IACArB,KAAK,CAACuB,MAAM,CAAC;MACXpD,UAAU,EAAEkD;IACd,CAAC,CAAC;IACFd,QAAQ,GAAGc,aAAa,CAACrE,IAAI,CAAC;EAChC,CAAC,EAAE,CAACgD,KAAK,EAAEQ,aAAa,EAAEjB,MAAM,CAACpB,UAAU,CAACX,aAAa,EAAE+B,MAAM,CAACuB,UAAU,EAAEP,QAAQ,EAAE7C,SAAS,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,gBAAgB,EAAEwC,eAAe,EAAEC,kBAAkB,CAAC,CAAC;EAC9L,MAAM;IACJkB;EACF,CAAC,GAAGjC,MAAM;EACV,MAAMkC,uBAAuB,GAAGlF,gBAAgB,CAACoE,gBAAgB,CAAC;EAClE,MAAMe,yBAAyB,GAAGvF,KAAK,CAACwF,OAAO,CAAC,MAAMH,gBAAgB,GAAG,CAAC,GAAGhF,QAAQ,CAACiF,uBAAuB,EAAED,gBAAgB,CAAC,GAAGI,SAAS,EAAE,CAACJ,gBAAgB,EAAEC,uBAAuB,CAAC,CAAC;EAC1LtF,KAAK,CAAC0F,SAAS,CAAC,MAAMH,yBAAyB,EAAEI,KAAK,EAAE,CAACJ,yBAAyB,CAAC,CAAC;EACpF,MAAMK,WAAW,GAAGxF,gBAAgB,CAAC0B,QAAQ,IAAI;IAC/C+B,KAAK,CAAC9B,KAAK,CAACD,QAAQ,GAAGA,QAAQ;IAC/B,IAAIiC,aAAa,CAACQ,OAAO,IAAI,CAACgB,yBAAyB,EAAE;MACvD;MACAxB,aAAa,CAACQ,OAAO,GAAG,KAAK;MAC7BC,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACLe,yBAAyB,CAAC,CAAC;IAC7B;EACF,CAAC,CAAC;EACFpF,eAAe,CAAC,MAAM0F,eAAe,CAACxB,aAAa,EAAER,KAAK,EAAE+B,WAAW,CAAC,EAAE,CAACvB,aAAa,EAAER,KAAK,EAAE+B,WAAW,CAAC,CAAC;EAC9GzF,eAAe,CAACqE,gBAAgB,EAAE,CAACA,gBAAgB,CAAC,CAAC;EACrD,MAAMrC,QAAQ,GAAG2D,WAAW,CAACjC,KAAK,EAAET,MAAM,EAAEoB,gBAAgB,CAAC;EAC7D,OAAO;IACLA,gBAAgB;IAChBe,yBAAyB;IACzBpD;EACF,CAAC;AACH;AACA,SAAS2D,WAAWA,CAACjC,KAAK,EAAET,MAAM,EAAEoB,gBAAgB,EAAE;EACpD,MAAMuB,WAAW,GAAGlC,KAAK,CAAC9B,KAAK,CAAC4B,UAAU;EAC1C,MAAM;IACJqC,IAAI;IACJC,YAAY,EAAEC,gBAAgB;IAC9BC,aAAa;IACbC;EACF,CAAC,GAAGhD,MAAM;EACV,MAAMiD,oBAAoB,GAAGrG,KAAK,CAACgE,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7C,MAAMsC,oBAAoB,GAAGtG,KAAK,CAACgE,MAAM,CAAC,KAAK,CAAC;EAChD,MAAMuC,iBAAiB,GAAGvG,KAAK,CAACgE,MAAM,CAAC,KAAK,CAAC;EAC7C,MAAMwC,UAAU,GAAGpD,MAAM,CAACoD,UAAU;EACpC,MAAMjF,SAAS,GAAGf,QAAQ,CAACqD,KAAK,EAAEhC,SAAS,CAACN,SAAS,CAAC;EACtD,MAAMkF,iBAAiB,GAAGrG,gBAAgB,CAACsG,KAAK,IAAI;IAClD,IAAIC,KAAK,GAAGZ,WAAW,CAACa,GAAG,CAACF,KAAK,CAAC;IAClC,IAAIC,KAAK,KAAKlB,SAAS,EAAE;MACvBkB,KAAK,GAAG;QACN5B,OAAO,EAAElB,KAAK,CAAC9B,KAAK,CAACC,UAAU,CAACT,SAAS;QACzCsF,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE,CAAC;QAChBC,MAAM,EAAE,CAAC;QACTpC,UAAU,EAAE,KAAK;QACjBqC,qBAAqB,EAAE;MACzB,CAAC;MACDjB,WAAW,CAACkB,GAAG,CAACP,KAAK,EAAEC,KAAK,CAAC;IAC/B;IACA,OAAOA,KAAK;EACd,CAAC,CAAC;EACF,MAAM;IACJO;EACF,CAAC,GAAG9D,MAAM;EACV,MAAM+D,kBAAkB,GAAGnH,KAAK,CAACyE,WAAW,CAAC2C,GAAG,IAAI;IAClD;IACA;IACAC,cAAc,CAAC9F,SAAS,CAAC;IACzB,MAAMS,UAAU,GAAGH,SAAS,CAACG,UAAU,CAAC6B,KAAK,CAAC9B,KAAK,CAAC;IACpD,MAAMuF,aAAa,GAAGtF,UAAU,CAACT,SAAS;IAC1C,MAAMoF,KAAK,GAAGF,iBAAiB,CAACW,GAAG,CAACG,EAAE,CAAC;IACvC,IAAI,CAACrB,gBAAgB,EAAE;MACrBS,KAAK,CAAC5B,OAAO,GAAGuC,aAAa;MAC7BX,KAAK,CAACK,qBAAqB,GAAG,KAAK;IACrC,CAAC,MAAM;MACL,MAAMQ,iBAAiB,GAAGtB,gBAAgB,CAACkB,GAAG,CAAC;MAC/C,IAAII,iBAAiB,KAAK,MAAM,EAAE;QAChC,IAAIb,KAAK,CAACK,qBAAqB,EAAE;UAC/B,MAAMS,kBAAkB,GAAGrB,qBAAqB,GAAGA,qBAAqB,CAACgB,GAAG,CAAC,GAAGE,aAAa;;UAE7F;UACAX,KAAK,CAAC5B,OAAO,GAAG0C,kBAAkB,IAAIH,aAAa;QACrD;QACAhB,oBAAoB,CAAC/B,OAAO,GAAG,IAAI;QACnCoC,KAAK,CAAChC,UAAU,GAAG,IAAI;MACzB,CAAC,MAAM;QACL;QACAgC,KAAK,CAAC5B,OAAO,GAAGyC,iBAAiB,IAAIxF,UAAU,CAACT,SAAS;QACzDoF,KAAK,CAACK,qBAAqB,GAAG,KAAK;QACnCL,KAAK,CAAChC,UAAU,GAAG,KAAK;MAC1B;IACF;IACA,IAAIwB,aAAa,EAAE;MACjB,MAAMuB,OAAO,GAAGvB,aAAa,CAACiB,GAAG,CAAC;MAClCT,KAAK,CAACE,UAAU,GAAGa,OAAO,CAACC,GAAG,IAAI,CAAC;MACnChB,KAAK,CAACG,aAAa,GAAGY,OAAO,CAACE,MAAM,IAAI,CAAC;IAC3C,CAAC,MAAM;MACLjB,KAAK,CAACE,UAAU,GAAG,CAAC;MACpBF,KAAK,CAACG,aAAa,GAAG,CAAC;IACzB;IACAI,cAAc,GAAGP,KAAK,EAAES,GAAG,CAAC;IAC5B,OAAOT,KAAK;EACd,CAAC,EAAE,CAAC9C,KAAK,EAAEqC,gBAAgB,EAAEO,iBAAiB,EAAEL,qBAAqB,EAAE7E,SAAS,EAAE4E,aAAa,EAAEe,cAAc,CAAC,CAAC;EACjH,MAAMW,eAAe,GAAG7H,KAAK,CAACyE,WAAW,CAAC,MAAM;IAC9C6B,oBAAoB,CAAC/B,OAAO,GAAG,KAAK;IACpC,MAAMd,wBAAwB,GAAG+C,UAAU,EAAEmB,GAAG,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEX,GAAG,KAAK;MACpE,MAAMT,KAAK,GAAGQ,kBAAkB,CAACC,GAAG,CAAC;MACrC,OAAOW,GAAG,GAAGpB,KAAK,CAAC5B,OAAO,GAAG4B,KAAK,CAACE,UAAU,GAAGF,KAAK,CAACG,aAAa,GAAGH,KAAK,CAACI,MAAM;IACpF,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;IACV,MAAMrD,2BAA2B,GAAG8C,UAAU,EAAEoB,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEX,GAAG,KAAK;MAC1E,MAAMT,KAAK,GAAGQ,kBAAkB,CAACC,GAAG,CAAC;MACrC,OAAOW,GAAG,GAAGpB,KAAK,CAAC5B,OAAO,GAAG4B,KAAK,CAACE,UAAU,GAAGF,KAAK,CAACG,aAAa,GAAGH,KAAK,CAACI,MAAM;IACpF,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;IACV,MAAMxE,SAAS,GAAG,EAAE;IACpB,MAAMe,sBAAsB,GAAG0C,IAAI,CAAC8B,MAAM,CAAC,CAACC,GAAG,EAAEX,GAAG,KAAK;MACvD7E,SAAS,CAACI,IAAI,CAACoF,GAAG,CAAC;MACnB,MAAMpB,KAAK,GAAGQ,kBAAkB,CAACC,GAAG,CAAC;MACrC,MAAMY,KAAK,GAAGrB,KAAK,CAAC5B,OAAO,GAAG4B,KAAK,CAACE,UAAU,GAAGF,KAAK,CAACG,aAAa,GAAGH,KAAK,CAACI,MAAM;MACnF,OAAOgB,GAAG,GAAGC,KAAK;IACpB,CAAC,EAAE,CAAC,CAAC;IACL,IAAI,CAAC1B,oBAAoB,CAAC/B,OAAO,EAAE;MACjC;MACA8B,oBAAoB,CAAC9B,OAAO,GAAG0D,QAAQ;IACzC;IACA,MAAMC,gBAAgB,GAAGzE,wBAAwB,KAAKI,KAAK,CAAC9B,KAAK,CAACI,QAAQ,CAACsB,wBAAwB,IAAIC,2BAA2B,KAAKG,KAAK,CAAC9B,KAAK,CAACI,QAAQ,CAACuB,2BAA2B,IAAIJ,sBAAsB,KAAKO,KAAK,CAAC9B,KAAK,CAACI,QAAQ,CAACmB,sBAAsB;IACjQ,MAAMnB,QAAQ,GAAG;MACfmB,sBAAsB;MACtBf,SAAS;MACTkB,wBAAwB;MACxBC;IACF,CAAC;IACDG,KAAK,CAACoD,GAAG,CAAC,UAAU,EAAE9E,QAAQ,CAAC;IAC/B,IAAI+F,gBAAgB,EAAE;MACpB1D,gBAAgB,CAAC,CAAC;IACpB;IACA+B,iBAAiB,CAAChC,OAAO,GAAG,IAAI;EAClC,CAAC,EAAE,CAACV,KAAK,EAAE2C,UAAU,EAAER,IAAI,EAAEmB,kBAAkB,EAAE3C,gBAAgB,CAAC,CAAC;EACnE,MAAM2D,qBAAqB,GAAG/H,gBAAgB,CAACyH,eAAe,CAAC;EAC/D,MAAM5B,YAAY,GAAGS,KAAK,IAAI;IAC5B,OAAOX,WAAW,CAACa,GAAG,CAACF,KAAK,CAAC,EAAE3B,OAAO,IAAIlD,SAAS,CAACN,SAAS,CAACsC,KAAK,CAAC9B,KAAK,CAAC;EAC5E,CAAC;EACD,MAAMqG,yBAAyB,GAAGA,CAACb,EAAE,EAAErF,MAAM,KAAK;IAChD,MAAMyE,KAAK,GAAGF,iBAAiB,CAACc,EAAE,CAAC;IACnC,MAAMc,SAAS,GAAG1B,KAAK,CAAC5B,OAAO,KAAK7C,MAAM;IAC1CyE,KAAK,CAACK,qBAAqB,GAAG,KAAK;IACnCL,KAAK,CAAC5B,OAAO,GAAG7C,MAAM;IACtBqE,iBAAiB,CAAChC,OAAO,KAAK,CAAC8D,SAAS;EAC1C,CAAC;EACD,MAAMC,gBAAgB,GAAGf,EAAE,IAAI;IAC7B,OAAOxB,WAAW,CAACa,GAAG,CAACW,EAAE,CAAC,EAAE5C,UAAU,IAAI,KAAK;EACjD,CAAC;EACD,MAAM4D,uBAAuB,GAAGA,CAAA,KAAM;IACpC,OAAOlC,oBAAoB,CAAC9B,OAAO;EACrC,CAAC;EACD,MAAMiE,uBAAuB,GAAGC,KAAK,IAAI;IACvC,IAAInC,oBAAoB,CAAC/B,OAAO,IAAIkE,KAAK,GAAGpC,oBAAoB,CAAC9B,OAAO,EAAE;MACxE8B,oBAAoB,CAAC9B,OAAO,GAAGkE,KAAK;IACtC;EACF,CAAC;EACD,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B3C,WAAW,CAACJ,KAAK,CAAC,CAAC;IACnBkC,eAAe,CAAC,CAAC;EACnB,CAAC;EACD,MAAMc,cAAc,GAAGzI,UAAU,CAAC,MAAM,OAAO0I,cAAc,KAAK,WAAW,GAAGnD,SAAS,GAAG,IAAImD,cAAc,CAACC,OAAO,IAAI;IACxH,KAAK,IAAIpG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoG,OAAO,CAACnG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC1C,MAAMkE,KAAK,GAAGkC,OAAO,CAACpG,CAAC,CAAC;MACxB,MAAMP,MAAM,GAAGyE,KAAK,CAACmC,aAAa,IAAInC,KAAK,CAACmC,aAAa,CAACpG,MAAM,GAAG,CAAC,GAAGiE,KAAK,CAACmC,aAAa,CAAC,CAAC,CAAC,CAACC,SAAS,GAAGpC,KAAK,CAACqC,WAAW,CAAC9G,MAAM;MAClI,MAAMwE,KAAK,GAAGC,KAAK,CAACsC,MAAM,CAACC,QAAQ;MACnC,MAAMC,mBAAmB,GAAG/F,MAAM,CAACgG,kBAAkB,GAAG,CAAC,EAAE7B,EAAE;MAC7D,IAAI4B,mBAAmB,KAAKzC,KAAK,IAAIxE,MAAM,KAAK,CAAC,EAAE;QACjD;QACA;QACA;QACA;MACF;MACAkG,yBAAyB,CAAC1B,KAAK,EAAExE,MAAM,CAAC;IAC1C;IACA,IAAI,CAACqE,iBAAiB,CAAChC,OAAO,EAAE;MAC9B;MACA8E,qBAAqB,CAAC,MAAM;QAC1BlB,qBAAqB,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,CAAC,CAAC5D,OAAO;EACX,MAAM+E,gBAAgB,GAAGA,CAACC,OAAO,EAAE7C,KAAK,KAAK;IAC3C6C,OAAO,CAACL,QAAQ,GAAGxC,KAAK;IACxBiC,cAAc,EAAEa,OAAO,CAACD,OAAO,CAAC;IAChC,OAAO,MAAMZ,cAAc,EAAEc,SAAS,CAACF,OAAO,CAAC;EACjD,CAAC;;EAED;EACA;EACApJ,eAAe,CAAC,MAAM;IACpB0H,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EACrB,OAAO;IACL5B,YAAY;IACZuC,uBAAuB;IACvBJ,yBAAyB;IACzBP,eAAe;IACfyB,gBAAgB;IAChBhB,gBAAgB;IAChB7B,iBAAiB;IACjB8B,uBAAuB;IACvBG;EACF,CAAC;AACH;AACA,SAAS7C,eAAeA,CAAC6D,IAAI,EAAE7F,KAAK,EAAE+B,WAAW,EAAE;EACjD,IAAI,CAAC8D,IAAI,EAAE;IACT,OAAOjE,SAAS;EAClB;EACA,MAAMkE,MAAM,GAAGD,IAAI,CAACE,qBAAqB,CAAC,CAAC;EAC3C,MAAMC,WAAW,GAAG;IAClB/G,KAAK,EAAEvC,oBAAoB,CAACoJ,MAAM,CAAC7G,KAAK,EAAE,CAAC,CAAC;IAC5CZ,MAAM,EAAE3B,oBAAoB,CAACoJ,MAAM,CAACzH,MAAM,EAAE,CAAC;EAC/C,CAAC;EACD,IAAI2B,KAAK,CAAC9B,KAAK,CAACD,QAAQ,KAAKpB,IAAI,CAACI,KAAK,IAAI,CAACJ,IAAI,CAACoJ,MAAM,CAACD,WAAW,EAAEhG,KAAK,CAAC9B,KAAK,CAACD,QAAQ,CAAC,EAAE;IAC1F8D,WAAW,CAACiE,WAAW,CAAC;EAC1B;EACA,IAAI,OAAOjB,cAAc,KAAK,WAAW,EAAE;IACzC,OAAOnD,SAAS;EAClB;EACA,MAAMsE,QAAQ,GAAG,IAAInB,cAAc,CAAC,CAAC,CAACjC,KAAK,CAAC,KAAK;IAC/C,IAAI,CAACA,KAAK,EAAE;MACV;IACF;IACA,MAAM7E,QAAQ,GAAG;MACfgB,KAAK,EAAEvC,oBAAoB,CAACoG,KAAK,CAACqC,WAAW,CAAClG,KAAK,EAAE,CAAC,CAAC;MACvDZ,MAAM,EAAE3B,oBAAoB,CAACoG,KAAK,CAACqC,WAAW,CAAC9G,MAAM,EAAE,CAAC;IAC1D,CAAC;IACD,IAAI,CAACxB,IAAI,CAACoJ,MAAM,CAAChI,QAAQ,EAAE+B,KAAK,CAAC9B,KAAK,CAACD,QAAQ,CAAC,EAAE;MAChD8D,WAAW,CAAC9D,QAAQ,CAAC;IACvB;EACF,CAAC,CAAC;EACFiI,QAAQ,CAACP,OAAO,CAACE,IAAI,CAAC;EACtB,OAAO,MAAM;IACXK,QAAQ,CAACC,UAAU,CAAC,CAAC;EACvB,CAAC;AACH;AACA,MAAMC,kBAAkB,GAAG,IAAIC,OAAO,CAAC,CAAC;AACxC,SAASxF,oBAAoBA,CAAC6E,OAAO,EAAElI,aAAa,EAAE;EACpD,IAAIA,aAAa,KAAKoE,SAAS,EAAE;IAC/B,OAAOpE,aAAa;EACtB;EACA,IAAIkI,OAAO,KAAK,IAAI,EAAE;IACpB,OAAO,CAAC;EACV;EACA,MAAMY,UAAU,GAAGF,kBAAkB,CAACrD,GAAG,CAAC2C,OAAO,CAAC;EAClD,IAAIY,UAAU,KAAK1E,SAAS,EAAE;IAC5B,OAAO0E,UAAU;EACnB;EACA,MAAMC,GAAG,GAAGnK,aAAa,CAACsJ,OAAO,CAAC;EAClC,MAAMc,SAAS,GAAGD,GAAG,CAACE,aAAa,CAAC,KAAK,CAAC;EAC1CD,SAAS,CAACE,KAAK,CAACzH,KAAK,GAAG,MAAM;EAC9BuH,SAAS,CAACE,KAAK,CAACrI,MAAM,GAAG,MAAM;EAC/BmI,SAAS,CAACE,KAAK,CAACC,QAAQ,GAAG,UAAU;EACrCH,SAAS,CAACE,KAAK,CAACE,QAAQ,GAAG,QAAQ;EACnCJ,SAAS,CAACK,SAAS,GAAG,WAAW;EACjCnB,OAAO,CAACoB,WAAW,CAACN,SAAS,CAAC;EAC9B,MAAMO,IAAI,GAAGP,SAAS,CAACQ,WAAW,GAAGR,SAAS,CAACS,WAAW;EAC1DvB,OAAO,CAACwB,WAAW,CAACV,SAAS,CAAC;EAC9BJ,kBAAkB,CAAChD,GAAG,CAACsC,OAAO,EAAEqB,IAAI,CAAC;EACrC,OAAOA,IAAI;AACb;AACA,SAASvD,cAAcA,CAAChF,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}