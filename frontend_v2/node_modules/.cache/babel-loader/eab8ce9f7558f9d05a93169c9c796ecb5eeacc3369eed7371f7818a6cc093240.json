{"ast":null,"code":"// // frontend_v2/src/pages/ProductsPage.js\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import {\n//   Container,\n//   Table,\n//   Spinner,\n//   Alert,\n//   Button,\n//   Card,\n//   ButtonGroup,\n//   Badge,\n//   InputGroup,\n//   FormControl,\n// } from 'react-bootstrap';\n// import { useToast } from '../components/ui/ToastProvider';\n// import { getProducts, createProduct, updateProduct, patchProduct } from '../services/api';\n// import ProductFormModal from '../components/ProductFormModal';\n// import RoleRequired from '../components/RoleRequired';\n// import SortDropdown from '../components/ui/SortDropdown';\n// import EmptyState from '../components/ui/EmptyState';\n\n// function ProductsPage() {\n//   const [products, setProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState('');\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedProduct, setSelectedProduct] = useState(null);\n//   const { showToast } = useToast();\n\n//   const [search, setSearch] = useState('');\n//   const [sortOrder, setSortOrder] = useState('-id');\n\n//   const sortOptions = [\n//     { value: '-id', label: 'Most Recent' },\n//     { value: 'name', label: 'Name (A-Z)' },\n//     { value: '-name', label: 'Name (Z-A)' },\n//     { value: '-stock_quantity', label: 'Stock (High-Low)' },\n//     { value: 'stock_quantity', label: 'Stock (Low-High)' },\n//   ];\n\n//   const fetchProducts = useCallback(async () => {\n//     try {\n//       setLoading(true);\n//       const params = { ordering: sortOrder, search };\n//       const response = await getProducts(params);\n//       setProducts(response.data);\n//       setError('');\n//     } catch (err) {\n//       setError('Failed to fetch products.');\n//       console.error(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }, [sortOrder, search]);\n\n//   useEffect(() => {\n//     fetchProducts();\n//   }, [fetchProducts]);\n\n//   const handleShowCreateModal = () => {\n//     setSelectedProduct(null);\n//     setShowModal(true);\n//   };\n\n//   const handleShowEditModal = (product) => {\n//     setSelectedProduct(product);\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//     setSelectedProduct(null);\n//   };\n\n//   const handleSave = async (formData) => {\n//     try {\n//       if (selectedProduct) {\n//         await updateProduct(selectedProduct.id, formData);\n//         showToast({ variant: 'success', message: 'Product updated' });\n//       } else {\n//         await createProduct(formData);\n//         showToast({ variant: 'success', message: 'Product created' });\n//       }\n//       fetchProducts();\n//       handleCloseModal();\n//     } catch (err) {\n//       setError(selectedProduct ? 'Failed to update product.' : 'Failed to create product.');\n//       showToast({ variant: 'danger', message: 'Action failed' });\n//     }\n//   };\n\n//   const handleArchive = async (id) => {\n//     if (\n//       window.confirm(\n//         'Are you sure you want to archive this product? It will be hidden from lists and new orders.'\n//       )\n//     ) {\n//       try {\n//         await patchProduct(id, { is_active: false });\n//         showToast({ variant: 'success', message: 'Product archived successfully' });\n//         fetchProducts();\n//       } catch (err) {\n//         const errorMessage = err.response?.data?.detail || 'Failed to archive product.';\n//         setError(errorMessage);\n//         showToast({ variant: 'danger', message: 'Action failed' });\n//       }\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Container className=\"text-center mt-5\">\n//         <Spinner animation=\"border\" />\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container className=\"my-4\">\n//       <Card className=\"shadow-sm border-0\">\n//         {/* HEADER */}\n//         <Card.Header className=\"bg-white border-0 pb-0\">\n//           <div className=\"row align-items-center g-3\">\n//             {/* Left: Title */}\n//             <div className=\"col-md-3 text-md-start text-center\">\n//               <h3 className=\"mb-0 fw-semibold text-primary\">\n//                 <i className=\"bi bi-box-seam me-2\" /> Products\n//               </h3>\n//             </div>\n\n//             {/* Middle: Search bar */}\n//             <div className=\"col-md-4\">\n//               <InputGroup>\n//                 <InputGroup.Text className=\"bg-white border-end-0\">\n//                   <i className=\"bi bi-search text-muted\" />\n//                 </InputGroup.Text>\n//                 <FormControl\n//                   placeholder=\"Search products...\"\n//                   value={search}\n//                   onChange={(e) => setSearch(e.target.value)}\n//                   className=\"border-start-0 rounded-end-pill\"\n//                 />\n//               </InputGroup>\n//             </div>\n\n//             {/* Right: Sort + Create */}\n//             <div className=\"col-md-5 d-flex justify-content-md-end justify-content-center gap-2\">\n//               <SortDropdown options={sortOptions} value={sortOrder} onChange={setSortOrder} />\n//               <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                 <Button\n//                   variant=\"primary\"\n//                   onClick={handleShowCreateModal}\n//                   className=\"rounded-pill shadow-sm px-3 py-2 d-flex align-items-center\"\n//                 >\n//                   <i className=\"bi bi-plus-lg me-2\" /> Create\n//                 </Button>\n//               </RoleRequired>\n//             </div>\n//           </div>\n//         </Card.Header>\n\n//         {/* BODY */}\n//         <Card.Body>\n//           {error && <Alert variant=\"danger\" className=\"mb-3\">{error}</Alert>}\n\n//           {!loading && products.length === 0 ? (\n//             <EmptyState\n//               title=\"No products found\"\n//               description=\"Try adjusting your search or create a new product.\"\n//               action={\n//                 <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                   <Button\n//                     variant=\"primary\"\n//                     onClick={handleShowCreateModal}\n//                     className=\"rounded-pill shadow-sm px-3 py-2\"\n//                   >\n//                     <i className=\"bi bi-plus-lg me-2\" /> Create Product\n//                   </Button>\n//                 </RoleRequired>\n//               }\n//             />\n//           ) : (\n//             <Table\n//               hover\n//               responsive\n//               className=\"align-middle mt-3 border rounded overflow-hidden shadow-sm\"\n//             >\n//               <thead className=\"table-light\">\n//                 <tr>\n//                   <th>SKU</th>\n//                   <th>Name</th>\n//                   <th>Stock</th>\n//                   <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                     <th className=\"text-center\">Actions</th>\n//                   </RoleRequired>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {products\n//                   .filter((p) =>\n//                     [p.sku, p.name].join(' ').toLowerCase().includes(search.toLowerCase())\n//                   )\n//                   .map((product) => (\n//                     <tr key={product.id}>\n//                       <td className=\"fw-medium\">{product.sku}</td>\n//                       <td>{product.name}</td>\n//                       <td>\n//                         {product.stock_quantity > 0 ? (\n//                           <Badge bg=\"success\" pill>\n//                             {product.stock_quantity} in stock\n//                           </Badge>\n//                         ) : (\n//                           <Badge bg=\"danger\" pill>\n//                             Out of stock\n//                           </Badge>\n//                         )}\n//                       </td>\n//                       <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                         <td className=\"text-center\">\n//                           <ButtonGroup size=\"sm\">\n//                             <Button\n//                               variant=\"outline-secondary\"\n//                               onClick={() => handleShowEditModal(product)}\n//                               title=\"Edit product\"\n//                             >\n//                               <i className=\"bi bi-pencil\" />\n//                             </Button>\n//                             <Button\n//                               variant=\"outline-danger\"\n//                               onClick={() => handleArchive(product.id)}\n//                               title=\"Archive product\"\n//                             >\n//                               <i className=\"bi bi-archive\" />\n//                             </Button>\n//                           </ButtonGroup>\n//                         </td>\n//                       </RoleRequired>\n//                     </tr>\n//                   ))}\n//               </tbody>\n//             </Table>\n//           )}\n//         </Card.Body>\n//       </Card>\n\n//       {/* MODAL */}\n//       <ProductFormModal\n//         show={showModal}\n//         handleClose={handleCloseModal}\n//         product={selectedProduct}\n//         onSave={handleSave}\n//       />\n//     </Container>\n//   );\n// }\n\n// export default ProductsPage;","map":{"version":3,"names":[],"sources":["/Users/abr/inventor/frontend_v2/src/pages/ProductsPage.js"],"sourcesContent":["// // frontend_v2/src/pages/ProductsPage.js\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import {\n//   Container,\n//   Table,\n//   Spinner,\n//   Alert,\n//   Button,\n//   Card,\n//   ButtonGroup,\n//   Badge,\n//   InputGroup,\n//   FormControl,\n// } from 'react-bootstrap';\n// import { useToast } from '../components/ui/ToastProvider';\n// import { getProducts, createProduct, updateProduct, patchProduct } from '../services/api';\n// import ProductFormModal from '../components/ProductFormModal';\n// import RoleRequired from '../components/RoleRequired';\n// import SortDropdown from '../components/ui/SortDropdown';\n// import EmptyState from '../components/ui/EmptyState';\n\n// function ProductsPage() {\n//   const [products, setProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState('');\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedProduct, setSelectedProduct] = useState(null);\n//   const { showToast } = useToast();\n\n//   const [search, setSearch] = useState('');\n//   const [sortOrder, setSortOrder] = useState('-id');\n\n//   const sortOptions = [\n//     { value: '-id', label: 'Most Recent' },\n//     { value: 'name', label: 'Name (A-Z)' },\n//     { value: '-name', label: 'Name (Z-A)' },\n//     { value: '-stock_quantity', label: 'Stock (High-Low)' },\n//     { value: 'stock_quantity', label: 'Stock (Low-High)' },\n//   ];\n\n//   const fetchProducts = useCallback(async () => {\n//     try {\n//       setLoading(true);\n//       const params = { ordering: sortOrder, search };\n//       const response = await getProducts(params);\n//       setProducts(response.data);\n//       setError('');\n//     } catch (err) {\n//       setError('Failed to fetch products.');\n//       console.error(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }, [sortOrder, search]);\n\n//   useEffect(() => {\n//     fetchProducts();\n//   }, [fetchProducts]);\n\n//   const handleShowCreateModal = () => {\n//     setSelectedProduct(null);\n//     setShowModal(true);\n//   };\n\n//   const handleShowEditModal = (product) => {\n//     setSelectedProduct(product);\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//     setSelectedProduct(null);\n//   };\n\n//   const handleSave = async (formData) => {\n//     try {\n//       if (selectedProduct) {\n//         await updateProduct(selectedProduct.id, formData);\n//         showToast({ variant: 'success', message: 'Product updated' });\n//       } else {\n//         await createProduct(formData);\n//         showToast({ variant: 'success', message: 'Product created' });\n//       }\n//       fetchProducts();\n//       handleCloseModal();\n//     } catch (err) {\n//       setError(selectedProduct ? 'Failed to update product.' : 'Failed to create product.');\n//       showToast({ variant: 'danger', message: 'Action failed' });\n//     }\n//   };\n\n//   const handleArchive = async (id) => {\n//     if (\n//       window.confirm(\n//         'Are you sure you want to archive this product? It will be hidden from lists and new orders.'\n//       )\n//     ) {\n//       try {\n//         await patchProduct(id, { is_active: false });\n//         showToast({ variant: 'success', message: 'Product archived successfully' });\n//         fetchProducts();\n//       } catch (err) {\n//         const errorMessage = err.response?.data?.detail || 'Failed to archive product.';\n//         setError(errorMessage);\n//         showToast({ variant: 'danger', message: 'Action failed' });\n//       }\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Container className=\"text-center mt-5\">\n//         <Spinner animation=\"border\" />\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container className=\"my-4\">\n//       <Card className=\"shadow-sm border-0\">\n//         {/* HEADER */}\n//         <Card.Header className=\"bg-white border-0 pb-0\">\n//           <div className=\"row align-items-center g-3\">\n//             {/* Left: Title */}\n//             <div className=\"col-md-3 text-md-start text-center\">\n//               <h3 className=\"mb-0 fw-semibold text-primary\">\n//                 <i className=\"bi bi-box-seam me-2\" /> Products\n//               </h3>\n//             </div>\n\n//             {/* Middle: Search bar */}\n//             <div className=\"col-md-4\">\n//               <InputGroup>\n//                 <InputGroup.Text className=\"bg-white border-end-0\">\n//                   <i className=\"bi bi-search text-muted\" />\n//                 </InputGroup.Text>\n//                 <FormControl\n//                   placeholder=\"Search products...\"\n//                   value={search}\n//                   onChange={(e) => setSearch(e.target.value)}\n//                   className=\"border-start-0 rounded-end-pill\"\n//                 />\n//               </InputGroup>\n//             </div>\n\n//             {/* Right: Sort + Create */}\n//             <div className=\"col-md-5 d-flex justify-content-md-end justify-content-center gap-2\">\n//               <SortDropdown options={sortOptions} value={sortOrder} onChange={setSortOrder} />\n//               <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                 <Button\n//                   variant=\"primary\"\n//                   onClick={handleShowCreateModal}\n//                   className=\"rounded-pill shadow-sm px-3 py-2 d-flex align-items-center\"\n//                 >\n//                   <i className=\"bi bi-plus-lg me-2\" /> Create\n//                 </Button>\n//               </RoleRequired>\n//             </div>\n//           </div>\n//         </Card.Header>\n\n//         {/* BODY */}\n//         <Card.Body>\n//           {error && <Alert variant=\"danger\" className=\"mb-3\">{error}</Alert>}\n\n//           {!loading && products.length === 0 ? (\n//             <EmptyState\n//               title=\"No products found\"\n//               description=\"Try adjusting your search or create a new product.\"\n//               action={\n//                 <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                   <Button\n//                     variant=\"primary\"\n//                     onClick={handleShowCreateModal}\n//                     className=\"rounded-pill shadow-sm px-3 py-2\"\n//                   >\n//                     <i className=\"bi bi-plus-lg me-2\" /> Create Product\n//                   </Button>\n//                 </RoleRequired>\n//               }\n//             />\n//           ) : (\n//             <Table\n//               hover\n//               responsive\n//               className=\"align-middle mt-3 border rounded overflow-hidden shadow-sm\"\n//             >\n//               <thead className=\"table-light\">\n//                 <tr>\n//                   <th>SKU</th>\n//                   <th>Name</th>\n//                   <th>Stock</th>\n//                   <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                     <th className=\"text-center\">Actions</th>\n//                   </RoleRequired>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {products\n//                   .filter((p) =>\n//                     [p.sku, p.name].join(' ').toLowerCase().includes(search.toLowerCase())\n//                   )\n//                   .map((product) => (\n//                     <tr key={product.id}>\n//                       <td className=\"fw-medium\">{product.sku}</td>\n//                       <td>{product.name}</td>\n//                       <td>\n//                         {product.stock_quantity > 0 ? (\n//                           <Badge bg=\"success\" pill>\n//                             {product.stock_quantity} in stock\n//                           </Badge>\n//                         ) : (\n//                           <Badge bg=\"danger\" pill>\n//                             Out of stock\n//                           </Badge>\n//                         )}\n//                       </td>\n//                       <RoleRequired allowedRoles={['Admin', 'Manager']}>\n//                         <td className=\"text-center\">\n//                           <ButtonGroup size=\"sm\">\n//                             <Button\n//                               variant=\"outline-secondary\"\n//                               onClick={() => handleShowEditModal(product)}\n//                               title=\"Edit product\"\n//                             >\n//                               <i className=\"bi bi-pencil\" />\n//                             </Button>\n//                             <Button\n//                               variant=\"outline-danger\"\n//                               onClick={() => handleArchive(product.id)}\n//                               title=\"Archive product\"\n//                             >\n//                               <i className=\"bi bi-archive\" />\n//                             </Button>\n//                           </ButtonGroup>\n//                         </td>\n//                       </RoleRequired>\n//                     </tr>\n//                   ))}\n//               </tbody>\n//             </Table>\n//           )}\n//         </Card.Body>\n//       </Card>\n\n//       {/* MODAL */}\n//       <ProductFormModal\n//         show={showModal}\n//         handleClose={handleCloseModal}\n//         product={selectedProduct}\n//         onSave={handleSave}\n//       />\n//     </Container>\n//   );\n// }\n\n// export default ProductsPage;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}