{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useId from '@mui/utils/useId';\nimport { useGridRootProps } from \"../../../hooks/utils/useGridRootProps.js\";\nimport { getValueOptions, isSingleSelectColDef } from \"./filterPanelUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n      item,\n      applyValue,\n      type,\n      apiRef,\n      focusElementRef,\n      slotProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const id = useId();\n  const rootProps = useGridRootProps();\n  const resolvedColumn = apiRef.current.getColumn(item.field);\n  const getOptionValue = resolvedColumn.getOptionValue;\n  const getOptionLabel = resolvedColumn.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  if (!resolvedColumn || !isSingleSelectColDef(resolvedColumn)) {\n    return null;\n  }\n  const BaseAutocomplete = rootProps.slots.baseAutocomplete;\n  return /*#__PURE__*/_jsx(BaseAutocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n    slotProps: {\n      textField: {\n        type: type || 'text',\n        inputRef: focusElementRef\n      }\n    }\n  }, other, slotProps?.root));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  clearButton: PropTypes.node,\n  disabled: PropTypes.bool,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  headerFilterMenu: PropTypes.node,\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: (props, propName) => {\n      if (props[propName] == null) {\n        return null;\n      }\n      if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n        return new Error(`Expected prop '${propName}' to be of type Element`);\n      }\n      return null;\n    }\n  })]),\n  /**\n   * It is `true` if the filter either has a value or an operator with no value\n   * required is selected (for example `isEmpty`)\n   */\n  isFilterActive: PropTypes.bool,\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  slotProps: PropTypes.object,\n  tabIndex: PropTypes.number,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useId","useGridRootProps","getValueOptions","isSingleSelectColDef","jsx","_jsx","GridFilterInputMultipleSingleSelect","props","item","applyValue","type","apiRef","focusElementRef","slotProps","other","id","rootProps","resolvedColumn","current","getColumn","field","getOptionValue","getOptionLabel","isOptionEqualToValue","useCallback","option","value","resolvedValueOptions","useMemo","filteredValues","Array","isArray","reduce","acc","resolvedValue","find","v","push","handleChange","event","map","BaseAutocomplete","slots","baseAutocomplete","multiple","options","onChange","label","getLocaleText","placeholder","textField","inputRef","root","process","env","NODE_ENV","propTypes","shape","object","isRequired","func","className","string","clearButton","node","disabled","bool","oneOfType","headerFilterMenu","propName","nodeType","Error","isFilterActive","number","operator","any","onBlur","onFocus","tabIndex","oneOf"],"sources":["/Users/abr/inventor/frontend_v2/node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useId from '@mui/utils/useId';\nimport { useGridRootProps } from \"../../../hooks/utils/useGridRootProps.js\";\nimport { getValueOptions, isSingleSelectColDef } from \"./filterPanelUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n      item,\n      applyValue,\n      type,\n      apiRef,\n      focusElementRef,\n      slotProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const id = useId();\n  const rootProps = useGridRootProps();\n  const resolvedColumn = apiRef.current.getColumn(item.field);\n  const getOptionValue = resolvedColumn.getOptionValue;\n  const getOptionLabel = resolvedColumn.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  if (!resolvedColumn || !isSingleSelectColDef(resolvedColumn)) {\n    return null;\n  }\n  const BaseAutocomplete = rootProps.slots.baseAutocomplete;\n  return /*#__PURE__*/_jsx(BaseAutocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n    slotProps: {\n      textField: {\n        type: type || 'text',\n        inputRef: focusElementRef\n      }\n    }\n  }, other, slotProps?.root));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  clearButton: PropTypes.node,\n  disabled: PropTypes.bool,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  headerFilterMenu: PropTypes.node,\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: (props, propName) => {\n      if (props[propName] == null) {\n        return null;\n      }\n      if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n        return new Error(`Expected prop '${propName}' to be of type Element`);\n      }\n      return null;\n    }\n  })]),\n  /**\n   * It is `true` if the filter either has a value or an operator with no value\n   * required is selected (for example `isEmpty`)\n   */\n  isFilterActive: PropTypes.bool,\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  slotProps: PropTypes.object,\n  tabIndex: PropTypes.number,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}