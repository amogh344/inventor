{"ast":null,"code":"/* ============================================================================\n   AXIOS INSTANCE & INTERCEPTORS\n============================================================================ */\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api'\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const authTokens = localStorage.getItem('authTokens');\n  if (authTokens) {\n    const token = JSON.parse(authTokens).access;\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Handle expired tokens & auto-refresh\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const authTokens = localStorage.getItem('authTokens');\n    const refreshToken = authTokens ? JSON.parse(authTokens).refresh : null;\n    if (refreshToken) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/api/token/refresh/', {\n          refresh: refreshToken\n        });\n        const newTokens = response.data;\n        localStorage.setItem('authTokens', JSON.stringify(newTokens));\n        api.defaults.headers.common['Authorization'] = `Bearer ${newTokens.access}`;\n        originalRequest.headers['Authorization'] = `Bearer ${newTokens.access}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Token refresh failed:\", refreshError);\n        localStorage.removeItem('authTokens');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n  }\n  return Promise.reject(error);\n});\n\n/* ============================================================================\n   AUTHENTICATION\n============================================================================ */\nexport const loginUser = (username, password) => api.post('/token/', {\n  username,\n  password\n});\nexport const registerUser = userData => api.post('/register/', userData);\nexport const requestPasswordReset = email => api.post('/password_reset/', {\n  email\n});\nexport const confirmPasswordReset = (token, password) => api.post('/password_reset/confirm/', {\n  token,\n  password\n});\n\n/* ============================================================================\n   PROFILE MANAGEMENT\n============================================================================ */\nexport const getUserProfile = () => api.get('/users/me/');\nexport const updateUserProfile = userData => api.patch('/users/me/', userData);\nexport const changePassword = passwordData => api.put('/change-password/', passwordData);\n\n/* ============================================================================\n   PRODUCTS\n============================================================================ */\nexport const getProducts = params => api.get('/products/', {\n  params\n});\nexport const createProduct = product => api.post('/products/', product);\nexport const updateProduct = (id, product) => api.put(`/products/${id}/`, product);\nexport const patchProduct = (id, productData) => api.patch(`/products/${id}/`, productData);\nexport const deleteProduct = id => api.delete(`/products/${id}/`);\n\n/* ============================================================================\n   SUPPLIERS\n============================================================================ */\nexport const getSuppliers = params => api.get('/suppliers/', {\n  params\n});\nexport const createSupplier = supplier => api.post('/suppliers/', supplier);\nexport const updateSupplier = (id, supplier) => api.put(`/suppliers/${id}/`, supplier);\nexport const deleteSupplier = id => api.delete(`/suppliers/${id}/`);\n\n/* ============================================================================\n   PURCHASE ORDERS\n============================================================================ */\nexport const getPurchaseOrders = () => api.get('/purchase-orders/');\nexport const createPurchaseOrder = orderData => api.post('/purchase-orders/', orderData);\nexport const receivePurchaseOrder = id => api.post(`/purchase-orders/${id}/receive/`);\n\n/* ============================================================================\n   SALES ORDERS\n============================================================================ */\nexport const getSalesOrders = () => api.get('/sales-orders/');\nexport const getSalesOrderById = id => api.get(`/sales-orders/${id}/`);\nexport const createSalesOrder = orderData => api.post('/sales-orders/', orderData);\n\n/* ============================================================================\n   DASHBOARD & REPORTS\n============================================================================ */\nexport const getDashboardStats = () => api.get('/dashboard-stats/');\nexport const getTransactions = params => api.get('/transactions/', {\n  params\n});\nexport const getAuditLogs = params => api.get('/audit-logs/', {\n  params\n});\n\n/* ============================================================================\n   EXPORT DEFAULT\n============================================================================ */\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","authTokens","localStorage","getItem","token","JSON","parse","access","headers","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","refresh","post","newTokens","data","setItem","stringify","defaults","common","refreshError","console","removeItem","window","location","href","loginUser","username","password","registerUser","userData","requestPasswordReset","email","confirmPasswordReset","getUserProfile","get","updateUserProfile","patch","changePassword","passwordData","put","getProducts","params","createProduct","product","updateProduct","id","patchProduct","productData","deleteProduct","delete","getSuppliers","createSupplier","supplier","updateSupplier","deleteSupplier","getPurchaseOrders","createPurchaseOrder","orderData","receivePurchaseOrder","getSalesOrders","getSalesOrderById","createSalesOrder","getDashboardStats","getTransactions","getAuditLogs"],"sources":["/Users/abr/inventor/frontend_v2/src/services/api.js"],"sourcesContent":["/* ============================================================================\n   AXIOS INSTANCE & INTERCEPTORS\n============================================================================ */\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api',\n});\n\n// Add auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const authTokens = localStorage.getItem('authTokens');\n    if (authTokens) {\n      const token = JSON.parse(authTokens).access;\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Handle expired tokens & auto-refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      const authTokens = localStorage.getItem('authTokens');\n      const refreshToken = authTokens ? JSON.parse(authTokens).refresh : null;\n\n      if (refreshToken) {\n        try {\n          const response = await axios.post('http://127.0.0.1:8000/api/token/refresh/', { refresh: refreshToken });\n          const newTokens = response.data;\n          localStorage.setItem('authTokens', JSON.stringify(newTokens));\n\n          api.defaults.headers.common['Authorization'] = `Bearer ${newTokens.access}`;\n          originalRequest.headers['Authorization'] = `Bearer ${newTokens.access}`;\n\n          return api(originalRequest);\n        } catch (refreshError) {\n          console.error(\"Token refresh failed:\", refreshError);\n          localStorage.removeItem('authTokens');\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n/* ============================================================================\n   AUTHENTICATION\n============================================================================ */\nexport const loginUser = (username, password) => api.post('/token/', { username, password });\nexport const registerUser = (userData) => api.post('/register/', userData);\nexport const requestPasswordReset = (email) => api.post('/password_reset/', { email });\nexport const confirmPasswordReset = (token, password) => api.post('/password_reset/confirm/', { token, password });\n\n/* ============================================================================\n   PROFILE MANAGEMENT\n============================================================================ */\nexport const getUserProfile = () => api.get('/users/me/');\nexport const updateUserProfile = (userData) => api.patch('/users/me/', userData);\nexport const changePassword = (passwordData) => api.put('/change-password/', passwordData);\n\n/* ============================================================================\n   PRODUCTS\n============================================================================ */\nexport const getProducts = (params) => api.get('/products/', { params });\nexport const createProduct = (product) => api.post('/products/', product);\nexport const updateProduct = (id, product) => api.put(`/products/${id}/`, product);\nexport const patchProduct = (id, productData) => api.patch(`/products/${id}/`, productData);\nexport const deleteProduct = (id) => api.delete(`/products/${id}/`);\n\n/* ============================================================================\n   SUPPLIERS\n============================================================================ */\nexport const getSuppliers = (params) => api.get('/suppliers/', { params });\nexport const createSupplier = (supplier) => api.post('/suppliers/', supplier);\nexport const updateSupplier = (id, supplier) => api.put(`/suppliers/${id}/`, supplier);\nexport const deleteSupplier = (id) => api.delete(`/suppliers/${id}/`);\n\n/* ============================================================================\n   PURCHASE ORDERS\n============================================================================ */\nexport const getPurchaseOrders = () => api.get('/purchase-orders/');\nexport const createPurchaseOrder = (orderData) => api.post('/purchase-orders/', orderData);\nexport const receivePurchaseOrder = (id) => api.post(`/purchase-orders/${id}/receive/`);\n\n/* ============================================================================\n   SALES ORDERS\n============================================================================ */\nexport const getSalesOrders = () => api.get('/sales-orders/');\nexport const getSalesOrderById = (id) => api.get(`/sales-orders/${id}/`);\nexport const createSalesOrder = (orderData) => api.post('/sales-orders/', orderData);\n\n/* ============================================================================\n   DASHBOARD & REPORTS\n============================================================================ */\nexport const getDashboardStats = () => api.get('/dashboard-stats/');\nexport const getTransactions = (params) => api.get('/transactions/', { params });\nexport const getAuditLogs = (params) => api.get('/audit-logs/', { params });\n\n/* ============================================================================\n   EXPORT DEFAULT\n============================================================================ */\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}